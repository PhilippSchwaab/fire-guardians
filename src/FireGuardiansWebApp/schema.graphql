# This file was generated. Do not edit manually.

schema {
    query: OctoQuery
    mutation: OctoMutation
    subscription: OctoSubscriptions
}

"Runtime entities of construction kit record 'Basic/Address'"
type BasicAddress {
    addressOfAdditionalLink: String
    addressRemarks: [String]
    cityTown: String
    constructionKitType: CkType
    department: String
    eMail: BasicEMail
    fax: BasicFaxNumber
    nationalCode: String
    pOBox: String
    phone: BasicPhoneNumber
    stateCounty: String
    street: String
    vATnumber: String
    zipOfPOBox: String
    zipcode: Int
}

"Runtime entities of construction kit type 'Basic/Asset'"
type BasicAsset {
    ckTypeId: CkTypeId
    configuredBy: BasicAsset_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String
    parent: BasicAsset_ParentUnion
    relatesTo: BasicAsset_RelatesToUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `BasicAsset`."
type BasicAssetConnection {
    "Information to aid in pagination."
    edges: [BasicAssetEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicAsset]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicAsset`."
type BasicAssetEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicAsset
}

type BasicAssetMutations {
    "Creates new entities of type 'BasicAsset'."
    create(entities: [BasicAssetInput]!): [BasicAsset]
    "Deletes an entity of type 'BasicAsset'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicAsset'."
    update(entities: [BasicAssetInputUpdate]!): [BasicAsset]
}

type BasicAssetUpdate {
    "The corresponding item"
    item: BasicAsset
    updateState: UpdateType
}

type BasicAssetUpdateMessage {
    "The corresponding items"
    items: [BasicAssetUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type BasicAsset"
type BasicAsset_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type BasicAsset"
type BasicAsset_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Association Basic/RelatedEquipment (Outbound) of entity type BasicAsset"
type BasicAsset_RelatesToUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Runtime entities of construction kit record 'Basic/EMail'"
type BasicEMail {
    constructionKitType: CkType
    eMail: String
    publicKey: String
    typeOfEMail: BasicTypeOfTelephoneBasic
    typeOfPublicKey: String
}

"Runtime entities of construction kit type 'Basic/Equipment'"
type BasicEquipment {
    ckTypeId: CkTypeId
    configuredBy: BasicEquipment_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String
    parent: BasicEquipment_ParentUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `BasicEquipment`."
type BasicEquipmentConnection {
    "Information to aid in pagination."
    edges: [BasicEquipmentEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicEquipment]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicEquipment`."
type BasicEquipmentEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicEquipment
}

"Runtime entities of construction kit type 'Basic/EquipmentGroup'"
type BasicEquipmentGroup {
    children: BasicEquipmentGroup_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: BasicEquipmentGroup_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String
    parent: BasicEquipmentGroup_ParentUnion
    relatesFrom: BasicEquipmentGroup_RelatesFromUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `BasicEquipmentGroup`."
type BasicEquipmentGroupConnection {
    "Information to aid in pagination."
    edges: [BasicEquipmentGroupEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicEquipmentGroup]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicEquipmentGroup`."
type BasicEquipmentGroupEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicEquipmentGroup
}

type BasicEquipmentGroupMutations {
    "Creates new entities of type 'BasicEquipmentGroup'."
    create(entities: [BasicEquipmentGroupInput]!): [BasicEquipmentGroup]
    "Deletes an entity of type 'BasicEquipmentGroup'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicEquipmentGroup'."
    update(entities: [BasicEquipmentGroupInputUpdate]!): [BasicEquipmentGroup]
}

type BasicEquipmentGroupUpdate {
    "The corresponding item"
    item: BasicEquipmentGroup
    updateState: UpdateType
}

type BasicEquipmentGroupUpdateMessage {
    "The corresponding items"
    items: [BasicEquipmentGroupUpdate]
}

"Association System/ParentChild (Inbound) of entity type BasicEquipmentGroup"
type BasicEquipmentGroup_ChildrenUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicEquipment(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentConnection
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Association System.Bot/Configures (Inbound) of entity type BasicEquipmentGroup"
type BasicEquipmentGroup_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type BasicEquipmentGroup"
type BasicEquipmentGroup_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
    basicEquipmentModel(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentModelConnection
}

"Association Basic/RelatedEquipment (Inbound) of entity type BasicEquipmentGroup"
type BasicEquipmentGroup_RelatesFromUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
}

"Runtime entities of construction kit type 'Basic/EquipmentModel'"
type BasicEquipmentModel {
    children: BasicEquipmentModel_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: BasicEquipmentModel_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `BasicEquipmentModel`."
type BasicEquipmentModelConnection {
    "Information to aid in pagination."
    edges: [BasicEquipmentModelEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicEquipmentModel]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicEquipmentModel`."
type BasicEquipmentModelEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicEquipmentModel
}

type BasicEquipmentModelMutations {
    "Creates new entities of type 'BasicEquipmentModel'."
    create(entities: [BasicEquipmentModelInput]!): [BasicEquipmentModel]
    "Deletes an entity of type 'BasicEquipmentModel'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicEquipmentModel'."
    update(entities: [BasicEquipmentModelInputUpdate]!): [BasicEquipmentModel]
}

type BasicEquipmentModelUpdate {
    "The corresponding item"
    item: BasicEquipmentModel
    updateState: UpdateType
}

type BasicEquipmentModelUpdateMessage {
    "The corresponding items"
    items: [BasicEquipmentModelUpdate]
}

"Association System/ParentChild (Inbound) of entity type BasicEquipmentModel"
type BasicEquipmentModel_ChildrenUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Association System.Bot/Configures (Inbound) of entity type BasicEquipmentModel"
type BasicEquipmentModel_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

type BasicEquipmentUpdate {
    "The corresponding item"
    item: BasicEquipment
    updateState: UpdateType
}

type BasicEquipmentUpdateMessage {
    "The corresponding items"
    items: [BasicEquipmentUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type BasicEquipment"
type BasicEquipment_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type BasicEquipment"
type BasicEquipment_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Runtime entities of construction kit record 'Basic/FaxNumber'"
type BasicFaxNumber {
    constructionKitType: CkType
    number: String
    type: BasicTypeOfTelephoneBasic
}

"Runtime entities of construction kit record 'Basic/Marking'"
type BasicMarking {
    additionalText: String
    constructionKitType: CkType
    file: OctoObjectId
    name: String
}

"Runtime entities of construction kit record 'Basic/NamePlate'"
type BasicNamePlate {
    address: BasicAddress
    assetSpecificProperties: [BasicMarking]
    constructionKitType: CkType
    manufacturerName: String
    manufacturerProductDesignation: String
    manufacturerProductFamily: String
    markings: [BasicMarking]
    serialNumber: String
    yearOfConstruction: String
}

"Runtime entities of construction kit type 'Basic/NamedEntity'"
type BasicNamedEntity {
    ckTypeId: CkTypeId
    configuredBy: BasicNamedEntity_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `BasicNamedEntity`."
type BasicNamedEntityConnection {
    "Information to aid in pagination."
    edges: [BasicNamedEntityEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicNamedEntity]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicNamedEntity`."
type BasicNamedEntityEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicNamedEntity
}

type BasicNamedEntityUpdate {
    "The corresponding item"
    item: BasicNamedEntity
    updateState: UpdateType
}

type BasicNamedEntityUpdateMessage {
    "The corresponding items"
    items: [BasicNamedEntityUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type BasicNamedEntity"
type BasicNamedEntity_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit record 'Basic/PhoneNumber'"
type BasicPhoneNumber {
    constructionKitType: CkType
    number: String
    type: BasicTypeOfTelephoneEnhanced
}

"Construction kit attribute definitions"
type CkAttribute {
    "Value type of the attribute."
    attributeValueType: AttributeValueType!
    "Construction kit attribute id."
    ckAttributeId: CkAttributeId!
    "Optional enum id of the attribute value type."
    ckEnum: CkEnum
    "Optional record id of the attribute value type."
    ckRecord: CkRecord
    "Default values of the attribute."
    defaultValues: [SimpleScalarType]
    "Optional description of the attribute."
    description: String
    "Optional flag that tells if an attribute is a data stream."
    isDataStream: Boolean
    "Optional meta data of the attribute."
    metaData: [CkAttributeMetaData]
}

"A connection from an object to a list of objects of type `CkAttributeDto`."
type CkAttributeDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkAttributeDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkAttribute]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkAttributeDto`."
type CkAttributeDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkAttribute
}

"Construction kit attribute meta data"
type CkAttributeMetaData {
    "Optional description of the meta data."
    description: String
    "Key of the meta data."
    key: ID!
    "Value of the meta data."
    value: String
}

"A construction kit enum"
type CkEnum {
    "Unique id of the enum."
    ckEnumId: CkEnumId!
    "Use flags for the enum."
    useFlags: Boolean!
    "Value of the enum"
    values: [CkEnumValue]!
}

"A connection from an object to a list of objects of type `CkEnumDto`."
type CkEnumDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkEnumDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkEnum]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkEnumDto`."
type CkEnumDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkEnum
}

"A construction kit enum value"
type CkEnumValue {
    "Description of the enum"
    description: String
    "Key of the enum"
    key: Int
    "Value of the enum"
    name: String
}

"A construction kit record"
type CkRecord {
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Filter of attribute names"
        attributeNames: [String],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): CkTypeAttributeDtoConnection
    baseRecordTypes: CkType
    "Unique id of the object."
    ckRecordId: CkRecordId!
    derivedRecordTypes(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): CkTypeDtoConnection
    isAbstract: Boolean!
    isFinal: Boolean!
}

"A connection from an object to a list of objects of type `CkRecordDto`."
type CkRecordDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkRecordDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkRecord]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkRecordDto`."
type CkRecordDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkRecord
}

"A construction kit type"
type CkType {
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Filter of attribute names"
        attributeNames: [String],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): CkTypeAttributeDtoConnection
    baseType: CkType
    "Unique id of the object."
    ckTypeId: CkTypeId!
    derivedTypes(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): CkTypeDtoConnection
    isAbstract: Boolean!
    isFinal: Boolean!
}

"Attributes of a construction kit type"
type CkTypeAttribute {
    "The construction kit attribute definition"
    attribute: CkAttribute
    "Attribute name within the entity."
    attributeName: String!
    "Value type of the attribute."
    attributeValueType: AttributeValueType!
    "Auto complete values for the attribute."
    autoCompleteValues: [String]
    "Auto increment reference for the attribute."
    autoIncrementReference: String
    "Construction kit attribute id."
    ckAttributeId: CkAttributeId!
    "Defines if the attribute is optional."
    isOptional: Boolean!
}

"A connection from an object to a list of objects of type `CkTypeAttributeDto`."
type CkTypeAttributeDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkTypeAttributeDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkTypeAttribute]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkTypeAttributeDto`."
type CkTypeAttributeDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkTypeAttribute
}

"A connection from an object to a list of objects of type `CkTypeDto`."
type CkTypeDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkTypeDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkType]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkTypeDto`."
type CkTypeDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkType
}

type ConstructionKit {
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the entity with the given attribute id."
        ckId: String,
        "Returns entities with the given attribute ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkAttributeDtoConnection
    enums(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the enum with the given enum id."
        ckId: String,
        "Returns enums with the given enum ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkEnumDtoConnection
    records(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the record with the given record id."
        ckId: String,
        "Returns records with the given record ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkRecordDtoConnection
    types(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the construction kit type with the given id."
        ckId: String,
        "Returns the construction kit types with the given ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkTypeDtoConnection
}

"Runtime entities of construction kit type 'FireGuardians/FireReport'"
type FireGuardiansFireReport {
    ckTypeId: CkTypeId
    configuredBy: FireGuardiansFireReport_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    image: OctoObjectId
    location: RtGeospatialValueDtoType
    name: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `FireGuardiansFireReport`."
type FireGuardiansFireReportConnection {
    "Information to aid in pagination."
    edges: [FireGuardiansFireReportEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [FireGuardiansFireReport]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `FireGuardiansFireReport`."
type FireGuardiansFireReportEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: FireGuardiansFireReport
}

type FireGuardiansFireReportMutations {
    "Creates new entities of type 'FireGuardiansFireReport'."
    create(entities: [FireGuardiansFireReportInput]!): [FireGuardiansFireReport]
    "Deletes an entity of type 'FireGuardiansFireReport'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'FireGuardiansFireReport'."
    update(entities: [FireGuardiansFireReportInputUpdate]!): [FireGuardiansFireReport]
}

type FireGuardiansFireReportUpdate {
    "The corresponding item"
    item: FireGuardiansFireReport
    updateState: UpdateType
}

type FireGuardiansFireReportUpdateMessage {
    "The corresponding items"
    items: [FireGuardiansFireReportUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type FireGuardiansFireReport"
type FireGuardiansFireReport_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'FireGuardians/Wallet'"
type FireGuardiansWallet {
    ckTypeId: CkTypeId
    configuredBy: FireGuardiansWallet_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    identityId: String
    location: RtGeospatialValueDtoType
    name: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `FireGuardiansWallet`."
type FireGuardiansWalletConnection {
    "Information to aid in pagination."
    edges: [FireGuardiansWalletEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [FireGuardiansWallet]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `FireGuardiansWallet`."
type FireGuardiansWalletEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: FireGuardiansWallet
}

type FireGuardiansWalletMutations {
    "Creates new entities of type 'FireGuardiansWallet'."
    create(entities: [FireGuardiansWalletInput]!): [FireGuardiansWallet]
    "Deletes an entity of type 'FireGuardiansWallet'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'FireGuardiansWallet'."
    update(entities: [FireGuardiansWalletInputUpdate]!): [FireGuardiansWallet]
}

type FireGuardiansWalletUpdate {
    "The corresponding item"
    item: FireGuardiansWallet
    updateState: UpdateType
}

type FireGuardiansWalletUpdateMessage {
    "The corresponding items"
    items: [FireGuardiansWalletUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type FireGuardiansWallet"
type FireGuardiansWallet_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Meta information for large binaries"
type LargeBinaryInfo {
    "Returns the id of binary"
    binaryId: OctoObjectId!
    "Returns the content type of the binary"
    contentType: String!
    "Returns the download link of the binary"
    downloadUri: Uri!
    "Returns the filename of the binary"
    filename: String!
    "Returns the lengths of the binary"
    length: BigInt!
    "Returns the uploaded date time of the binary"
    uploadDateTime: DateTime!
}

"A connection from an object to a list of objects of type `LargeBinaryInfoDto`."
type LargeBinaryInfoDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [LargeBinaryInfoDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [LargeBinaryInfo]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `LargeBinaryInfoDto`."
type LargeBinaryInfoDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: LargeBinaryInfo
}

type OctoMutation {
    runtime: Runtime
    "Uploads a large binary and stores it. ID of file is returned."
    sysCreateLargeBinary(binaryData: LargeBinary!): OctoObjectId
}

type OctoQuery {
    constructionKit: ConstructionKit
    runtime: RuntimeModelQuery
    sysLargeBinaries(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "ID of large binary that is requested."
        largeBinaryId: OctoObjectId
    ): LargeBinaryInfoDtoConnection
}

type OctoSubscriptions {
    basicAssetEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicAssetUpdateMessage
    basicEquipmentEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicEquipmentUpdateMessage
    basicEquipmentGroupEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicEquipmentGroupUpdateMessage
    basicEquipmentModelEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicEquipmentModelUpdateMessage
    basicNamedEntityEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicNamedEntityUpdateMessage
    fireGuardiansFireReportEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): FireGuardiansFireReportUpdateMessage
    fireGuardiansWalletEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): FireGuardiansWalletUpdateMessage
    systemAutoIncrementEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemAutoIncrementUpdateMessage
    systemBotAttributeAggregateConfigurationEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemBotAttributeAggregateConfigurationUpdateMessage
    systemBotServiceHookEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemBotServiceHookUpdateMessage
    systemConfigurationEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemConfigurationUpdateMessage
    systemEntityEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemEntityUpdateMessage
    systemNotificationNotificationMessageEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemNotificationNotificationMessageUpdateMessage
    systemNotificationNotificationTemplateEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemNotificationNotificationTemplateUpdateMessage
    systemQueryEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemQueryUpdateMessage
    systemTenantEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemTenantUpdateMessage
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type Point {
    coordinates: Position
}

type Position {
    altitude: Float
    latitude: Float!
    longitude: Float!
}

"A runtime entity type of Octo"
type RtEntity {
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Filter of attribute names"
        attributeNames: [String],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): RtEntityAttributeDtoConnection
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId
    rtWellKnownName: String
}

"Attribute of a runtime entity"
type RtEntityAttribute {
    "Attribute name within the entity."
    attributeName: String
    "Value of a scalar attribute."
    value: SimpleScalarType
}

"A connection from an object to a list of objects of type `RtEntityAttributeDto`."
type RtEntityAttributeDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [RtEntityAttributeDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [RtEntityAttribute]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `RtEntityAttributeDto`."
type RtEntityAttributeDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: RtEntityAttribute
}

"A connection from an object to a list of objects of type `RtEntityGenericDto`."
type RtEntityGenericDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [RtEntityGenericDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [RtEntity]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `RtEntityGenericDto`."
type RtEntityGenericDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: RtEntity
}

type RtGeospatialValueDtoType {
    distance: Float
    point: Point
}

type Runtime {
    "Mutation for entities of type 'BasicAsset'."
    basicAssets: BasicAssetMutations
    "Mutation for entities of type 'BasicEquipmentGroup'."
    basicEquipmentGroups: BasicEquipmentGroupMutations
    "Mutation for entities of type 'BasicEquipmentModel'."
    basicEquipmentModels: BasicEquipmentModelMutations
    "Mutation for entities of type 'FireGuardiansFireReport'."
    fireGuardiansFireReports: FireGuardiansFireReportMutations
    "Mutation for entities of type 'FireGuardiansWallet'."
    fireGuardiansWallets: FireGuardiansWalletMutations
    "Mutation for entities of type 'SystemAutoIncrement'."
    systemAutoIncrements: SystemAutoIncrementMutations
    "Mutation for entities of type 'SystemBotAttributeAggregateConfiguration'."
    systemBotAttributeAggregateConfigurations: SystemBotAttributeAggregateConfigurationMutations
    "Mutation for entities of type 'SystemBotServiceHook'."
    systemBotServiceHooks: SystemBotServiceHookMutations
    "Mutation for entities of type 'SystemConfiguration'."
    systemConfigurations: SystemConfigurationMutations
    "Mutation for entities of type 'SystemNotificationNotificationMessage'."
    systemNotificationNotificationMessages: SystemNotificationNotificationMessageMutations
    "Mutation for entities of type 'SystemNotificationNotificationTemplate'."
    systemNotificationNotificationTemplates: SystemNotificationNotificationTemplateMutations
    "Mutation for entities of type 'SystemQuery'."
    systemQuerys: SystemQueryMutations
    "Mutation for entities of type 'SystemTenant'."
    systemTenants: SystemTenantMutations
}

type RuntimeModelQuery {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicEquipment(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentConnection
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
    basicEquipmentModel(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentModelConnection
    basicNamedEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicNamedEntityConnection
    fireGuardiansFireReport(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansFireReportConnection
    fireGuardiansWallet(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansWalletConnection
    runtimeEntities(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    systemAutoIncrement(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemAutoIncrementConnection
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
    systemBotServiceHook(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotServiceHookConnection
    systemConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemConfigurationConnection
    systemEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemEntityConnection
    systemNotificationNotificationMessage(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationNotificationMessageConnection
    systemNotificationNotificationTemplate(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationNotificationTemplateConnection
    systemQuery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemQueryConnection
    systemTenant(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemTenantConnection
}

"Runtime entities of construction kit type 'System/AutoIncrement'"
type SystemAutoIncrement {
    ckTypeId: CkTypeId
    configuredBy: SystemAutoIncrement_ConfiguredByUnion
    constructionKitType: CkType
    currentValue: Int
    end: Int
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    start: Int
}

"A connection to `SystemAutoIncrement`."
type SystemAutoIncrementConnection {
    "Information to aid in pagination."
    edges: [SystemAutoIncrementEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemAutoIncrement]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemAutoIncrement`."
type SystemAutoIncrementEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemAutoIncrement
}

type SystemAutoIncrementMutations {
    "Creates new entities of type 'SystemAutoIncrement'."
    create(entities: [SystemAutoIncrementInput]!): [SystemAutoIncrement]
    "Deletes an entity of type 'SystemAutoIncrement'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemAutoIncrement'."
    update(entities: [SystemAutoIncrementInputUpdate]!): [SystemAutoIncrement]
}

type SystemAutoIncrementUpdate {
    "The corresponding item"
    item: SystemAutoIncrement
    updateState: UpdateType
}

type SystemAutoIncrementUpdateMessage {
    "The corresponding items"
    items: [SystemAutoIncrementUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemAutoIncrement"
type SystemAutoIncrement_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Bot/AttributeAggregateConfiguration'"
type SystemBotAttributeAggregateConfiguration {
    autoCompleteFilter: String
    autoCompleteLimit: Int
    ckTypeId: CkTypeId
    configuredBy: SystemBotAttributeAggregateConfiguration_ConfiguredByUnion
    configures: SystemBotAttributeAggregateConfiguration_ConfiguresUnion
    constructionKitType: CkType
    isAutoCompleteEnabled: Boolean
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `SystemBotAttributeAggregateConfiguration`."
type SystemBotAttributeAggregateConfigurationConnection {
    "Information to aid in pagination."
    edges: [SystemBotAttributeAggregateConfigurationEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemBotAttributeAggregateConfiguration]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemBotAttributeAggregateConfiguration`."
type SystemBotAttributeAggregateConfigurationEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemBotAttributeAggregateConfiguration
}

type SystemBotAttributeAggregateConfigurationMutations {
    "Creates new entities of type 'SystemBotAttributeAggregateConfiguration'."
    create(entities: [SystemBotAttributeAggregateConfigurationInput]!): [SystemBotAttributeAggregateConfiguration]
    "Deletes an entity of type 'SystemBotAttributeAggregateConfiguration'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemBotAttributeAggregateConfiguration'."
    update(entities: [SystemBotAttributeAggregateConfigurationInputUpdate]!): [SystemBotAttributeAggregateConfiguration]
}

type SystemBotAttributeAggregateConfigurationUpdate {
    "The corresponding item"
    item: SystemBotAttributeAggregateConfiguration
    updateState: UpdateType
}

type SystemBotAttributeAggregateConfigurationUpdateMessage {
    "The corresponding items"
    items: [SystemBotAttributeAggregateConfigurationUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemBotAttributeAggregateConfiguration"
type SystemBotAttributeAggregateConfiguration_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System.Bot/Configures (Outbound) of entity type SystemBotAttributeAggregateConfiguration"
type SystemBotAttributeAggregateConfiguration_ConfiguresUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicEquipment(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentConnection
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
    basicEquipmentModel(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentModelConnection
    basicNamedEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicNamedEntityConnection
    fireGuardiansFireReport(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansFireReportConnection
    fireGuardiansWallet(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansWalletConnection
    systemAutoIncrement(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemAutoIncrementConnection
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
    systemBotServiceHook(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotServiceHookConnection
    systemConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemConfigurationConnection
    systemEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemEntityConnection
    systemNotificationNotificationMessage(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationNotificationMessageConnection
    systemNotificationNotificationTemplate(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationNotificationTemplateConnection
    systemQuery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemQueryConnection
    systemTenant(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemTenantConnection
}

"Runtime entities of construction kit type 'System.Bot/ServiceHook'"
type SystemBotServiceHook {
    ckTypeId: CkTypeId
    configuredBy: SystemBotServiceHook_ConfiguredByUnion
    constructionKitType: CkType
    enabled: Boolean
    fieldFilter: String
    name: String
    queryCkTypeId: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    serviceHookAction: String
    serviceHookApiKey: String
    serviceHookBaseUri: String
}

"A connection to `SystemBotServiceHook`."
type SystemBotServiceHookConnection {
    "Information to aid in pagination."
    edges: [SystemBotServiceHookEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemBotServiceHook]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemBotServiceHook`."
type SystemBotServiceHookEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemBotServiceHook
}

type SystemBotServiceHookMutations {
    "Creates new entities of type 'SystemBotServiceHook'."
    create(entities: [SystemBotServiceHookInput]!): [SystemBotServiceHook]
    "Deletes an entity of type 'SystemBotServiceHook'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemBotServiceHook'."
    update(entities: [SystemBotServiceHookInputUpdate]!): [SystemBotServiceHook]
}

type SystemBotServiceHookUpdate {
    "The corresponding item"
    item: SystemBotServiceHook
    updateState: UpdateType
}

type SystemBotServiceHookUpdateMessage {
    "The corresponding items"
    items: [SystemBotServiceHookUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemBotServiceHook"
type SystemBotServiceHook_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System/Configuration'"
type SystemConfiguration {
    ckTypeId: CkTypeId
    configurationValue: String
    configuredBy: SystemConfiguration_ConfiguredByUnion
    constructionKitType: CkType
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `SystemConfiguration`."
type SystemConfigurationConnection {
    "Information to aid in pagination."
    edges: [SystemConfigurationEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemConfiguration]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemConfiguration`."
type SystemConfigurationEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemConfiguration
}

type SystemConfigurationMutations {
    "Creates new entities of type 'SystemConfiguration'."
    create(entities: [SystemConfigurationInput]!): [SystemConfiguration]
    "Deletes an entity of type 'SystemConfiguration'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemConfiguration'."
    update(entities: [SystemConfigurationInputUpdate]!): [SystemConfiguration]
}

type SystemConfigurationUpdate {
    "The corresponding item"
    item: SystemConfiguration
    updateState: UpdateType
}

type SystemConfigurationUpdateMessage {
    "The corresponding items"
    items: [SystemConfigurationUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemConfiguration"
type SystemConfiguration_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System/Entity'"
type SystemEntity {
    ckTypeId: CkTypeId
    configuredBy: SystemEntity_ConfiguredByUnion
    constructionKitType: CkType
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `SystemEntity`."
type SystemEntityConnection {
    "Information to aid in pagination."
    edges: [SystemEntityEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemEntity]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemEntity`."
type SystemEntityEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemEntity
}

type SystemEntityUpdate {
    "The corresponding item"
    item: SystemEntity
    updateState: UpdateType
}

type SystemEntityUpdateMessage {
    "The corresponding items"
    items: [SystemEntityUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemEntity"
type SystemEntity_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Notification/NotificationMessage'"
type SystemNotificationNotificationMessage {
    bodyText: String
    ckTypeId: CkTypeId
    configuredBy: SystemNotificationNotificationMessage_ConfiguredByUnion
    constructionKitType: CkType
    errorText: String
    lastTryDateTime: DateTime
    notificationType: SystemNotificationNotificationTypes
    recipientAddress: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    sendStatus: SystemNotificationNotificationStates
    sentDateTime: DateTime
    subjectText: String
}

"A connection to `SystemNotificationNotificationMessage`."
type SystemNotificationNotificationMessageConnection {
    "Information to aid in pagination."
    edges: [SystemNotificationNotificationMessageEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemNotificationNotificationMessage]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemNotificationNotificationMessage`."
type SystemNotificationNotificationMessageEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemNotificationNotificationMessage
}

type SystemNotificationNotificationMessageMutations {
    "Creates new entities of type 'SystemNotificationNotificationMessage'."
    create(entities: [SystemNotificationNotificationMessageInput]!): [SystemNotificationNotificationMessage]
    "Deletes an entity of type 'SystemNotificationNotificationMessage'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemNotificationNotificationMessage'."
    update(entities: [SystemNotificationNotificationMessageInputUpdate]!): [SystemNotificationNotificationMessage]
}

type SystemNotificationNotificationMessageUpdate {
    "The corresponding item"
    item: SystemNotificationNotificationMessage
    updateState: UpdateType
}

type SystemNotificationNotificationMessageUpdateMessage {
    "The corresponding items"
    items: [SystemNotificationNotificationMessageUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemNotificationNotificationMessage"
type SystemNotificationNotificationMessage_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Notification/NotificationTemplate'"
type SystemNotificationNotificationTemplate {
    bodyTemplate: String
    ckTypeId: CkTypeId
    configuredBy: SystemNotificationNotificationTemplate_ConfiguredByUnion
    constructionKitType: CkType
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    subjectTemplate: String
    type: SystemNotificationNotificationTypes
}

"A connection to `SystemNotificationNotificationTemplate`."
type SystemNotificationNotificationTemplateConnection {
    "Information to aid in pagination."
    edges: [SystemNotificationNotificationTemplateEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemNotificationNotificationTemplate]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemNotificationNotificationTemplate`."
type SystemNotificationNotificationTemplateEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemNotificationNotificationTemplate
}

type SystemNotificationNotificationTemplateMutations {
    "Creates new entities of type 'SystemNotificationNotificationTemplate'."
    create(entities: [SystemNotificationNotificationTemplateInput]!): [SystemNotificationNotificationTemplate]
    "Deletes an entity of type 'SystemNotificationNotificationTemplate'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemNotificationNotificationTemplate'."
    update(entities: [SystemNotificationNotificationTemplateInputUpdate]!): [SystemNotificationNotificationTemplate]
}

type SystemNotificationNotificationTemplateUpdate {
    "The corresponding item"
    item: SystemNotificationNotificationTemplate
    updateState: UpdateType
}

type SystemNotificationNotificationTemplateUpdateMessage {
    "The corresponding items"
    items: [SystemNotificationNotificationTemplateUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemNotificationNotificationTemplate"
type SystemNotificationNotificationTemplate_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System/Query'"
type SystemQuery {
    attributeSearchFilter: String
    ckTypeId: CkTypeId
    columns: String
    configuredBy: SystemQuery_ConfiguredByUnion
    constructionKitType: CkType
    fieldFilter: String
    name: String
    queryCkTypeId: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    sorting: String
    textSearchFilter: String
}

"A connection to `SystemQuery`."
type SystemQueryConnection {
    "Information to aid in pagination."
    edges: [SystemQueryEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemQuery]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemQuery`."
type SystemQueryEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemQuery
}

type SystemQueryMutations {
    "Creates new entities of type 'SystemQuery'."
    create(entities: [SystemQueryInput]!): [SystemQuery]
    "Deletes an entity of type 'SystemQuery'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemQuery'."
    update(entities: [SystemQueryInputUpdate]!): [SystemQuery]
}

type SystemQueryUpdate {
    "The corresponding item"
    item: SystemQuery
    updateState: UpdateType
}

type SystemQueryUpdateMessage {
    "The corresponding items"
    items: [SystemQueryUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemQuery"
type SystemQuery_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System/Tenant'"
type SystemTenant {
    ckTypeId: CkTypeId
    configuredBy: SystemTenant_ConfiguredByUnion
    constructionKitType: CkType
    databaseName: String
    parentTenantId: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    tenantId: String
}

"A connection to `SystemTenant`."
type SystemTenantConnection {
    "Information to aid in pagination."
    edges: [SystemTenantEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemTenant]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemTenant`."
type SystemTenantEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemTenant
}

type SystemTenantMutations {
    "Creates new entities of type 'SystemTenant'."
    create(entities: [SystemTenantInput]!): [SystemTenant]
    "Deletes an entity of type 'SystemTenant'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemTenant'."
    update(entities: [SystemTenantInputUpdate]!): [SystemTenant]
}

type SystemTenantUpdate {
    "The corresponding item"
    item: SystemTenant
    updateState: UpdateType
}

type SystemTenantUpdateMessage {
    "The corresponding items"
    items: [SystemTenantUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemTenant"
type SystemTenant_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Grouping of items result"
type grouping {
    "The average value of the given attribute names."
    avgStatistics: [statistics]
    "The count of entities in the group."
    count: Int!
    "The count of value of the given attribute names that are not null."
    countStatistics: [statistics]
    "A list of attributes the items are grouped by."
    groupByAttributeNames: [String]!
    "The key value of the group."
    keys: [SimpleScalarType]!
    "The maximum value of the given attribute names."
    maxStatistics: [statistics]
    "The minimum value of the given attribute names."
    minStatistics: [statistics]
}

"Statistics of items result"
type statistics {
    "Attribute name of the statistic"
    attributeName: String
    "Statistic value"
    value: SimpleScalarType
}

"Defines the type of modification during write operations"
enum AssociationModOptions {
    CREATE
    DELETE
}

"Enum of valid attribute types"
enum AttributeValueType {
    BINARY
    BINARY_LINKED
    BOOLEAN
    DATE_TIME
    DATE_TIME_OFFSET
    DOUBLE
    ENUM
    GEOSPATIAL_POINT
    INT
    INT_64
    INT_ARRAY
    RECORD
    RECORD_ARRAY
    STRING
    STRING_ARRAY
    TIME_SPAN
}

"Runtime entities of construction kit enum 'Basic/TypeOfTelephoneBasic'"
enum BasicTypeOfTelephoneBasic {
    HOME
    OFFICE
    SECRETARY
    SUBSTITUTE
}

"Runtime entities of construction kit enum 'Basic/TypeOfTelephoneEnhanced'"
enum BasicTypeOfTelephoneEnhanced {
    HOME
    OFFICE
    OFFICE_MOBILE
    PRIVATE_MOBILE
    SECRETARY
    SUBSTITUTE
}

"Defines the operator of field compare"
enum FieldFilterOperators {
    ANY_EQ
    EQUALS
    GREATER_EQUAL_THAN
    GREATER_THAN
    IN
    LESS_EQUAL_THAN
    LESS_THAN
    LIKE
    MATCH_REG_EX
    NOT_EQUALS
    NOT_IN
}

"The type of search that is used (a text based search using text analysis (high performance, scoring, maybe more false positives) or filtering of attributes (lower performance, more exact results)"
enum SearchFilterTypes {
    ATTRIBUTE_FILTER
    TEXT_SEARCH
}

"Defines the sort order"
enum SortOrders {
    ASCENDING
    DEFAULT
    DESCENDING
}

"Runtime entities of construction kit enum 'System.Notification/NotificationStates'"
enum SystemNotificationNotificationStates {
    ERROR
    PENDING
    SENT
}

"Runtime entities of construction kit enum 'System.Notification/NotificationTypes'"
enum SystemNotificationNotificationTypes {
    E_MAIL
    SMS
}

"Enum of valid update types"
enum UpdateType {
    DELETE
    INSERT
    REPLACE
    UNDEFINED
    UPDATE
}

scalar BigInt

"A construction kit id of type CkAttributeId."
scalar CkAttributeId

"A construction kit id of type CkEnumId."
scalar CkEnumId

"A construction kit id of type CkRecordId."
scalar CkRecordId

"A construction kit id of type CkTypeId."
scalar CkTypeId

"The `DateTime` scalar type represents a date and time. `DateTime` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
scalar DateTime

scalar LargeBinary

"A unique identifier for an runtime object."
scalar OctoObjectId

scalar SimpleScalarType

scalar Uri

input BasicAddressInput {
    addressOfAdditionalLink: String
    addressRemarks: [String]
    cityTown: String
    department: String
    eMail: BasicEMailInput
    fax: BasicFaxNumberInput
    nationalCode: String
    pOBox: String
    phone: BasicPhoneNumberInput
    stateCounty: String
    street: String
    vATnumber: String
    zipOfPOBox: String
    zipcode: Int
}

input BasicAssetInput {
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    parent: [RtAssociationInput]
    relatesTo: [RtAssociationInput]
    rtWellKnownName: String
}

input BasicAssetInputUpdate {
    "Item to update"
    item: BasicAssetInput!
    rtId: OctoObjectId
}

input BasicEMailInput {
    eMail: String
    publicKey: String
    typeOfEMail: BasicTypeOfTelephoneBasic
    typeOfPublicKey: String
}

input BasicEquipmentGroupInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    parent: [RtAssociationInput]
    relatesFrom: [RtAssociationInput]
    rtWellKnownName: String
}

input BasicEquipmentGroupInputUpdate {
    "Item to update"
    item: BasicEquipmentGroupInput!
    rtId: OctoObjectId
}

input BasicEquipmentModelInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    rtWellKnownName: String
}

input BasicEquipmentModelInputUpdate {
    "Item to update"
    item: BasicEquipmentModelInput!
    rtId: OctoObjectId
}

input BasicFaxNumberInput {
    number: String
    type: BasicTypeOfTelephoneBasic
}

input BasicMarkingInput {
    additionalText: String
    file: OctoObjectId
    name: String
}

input BasicNamePlateInput {
    address: BasicAddressInput
    assetSpecificProperties: [BasicMarkingInput]
    manufacturerName: String
    manufacturerProductDesignation: String
    manufacturerProductFamily: String
    markings: [BasicMarkingInput]
    serialNumber: String
    yearOfConstruction: String
}

input BasicPhoneNumberInput {
    number: String
    type: BasicTypeOfTelephoneEnhanced
}

input FieldFilter {
    attributeName: String!
    comparisonValue: SimpleScalarType
    operator: FieldFilterOperators
}

input FireGuardiansFireReportInput {
    configuredBy: [RtAssociationInput]
    description: String
    image: OctoObjectId
    location: PointInput
    name: String
    rtWellKnownName: String
}

input FireGuardiansFireReportInputUpdate {
    "Item to update"
    item: FireGuardiansFireReportInput!
    rtId: OctoObjectId
}

input FireGuardiansWalletInput {
    configuredBy: [RtAssociationInput]
    description: String
    identityId: String
    location: PointInput
    name: String
    rtWellKnownName: String
}

input FireGuardiansWalletInputUpdate {
    "Item to update"
    item: FireGuardiansWalletInput!
    rtId: OctoObjectId
}

input GroupBy {
    avgAttributeNameList: [String]
    countAttributeNameList: [String]
    groupByAttributeNameList: [String]!
    maxValueAttributeNameList: [String]
    minValueAttributeNameList: [String]
}

input NearGeospatialFilter {
    attributeName: String!
    maxDistance: Float
    minDistance: Float
    point: PointInput!
}

input PointInput {
    coordinates: PositionInput!
}

input PositionInput {
    latitude: Float!
    longitude: Float!
}

"Input field for associations"
input RtAssociationInput {
    "Type of modification."
    modOption: AssociationModOptions
    "Runtime ID of the target entity"
    target: RtEntityId!
}

"Id information consists of CkTypeId and RtId"
input RtEntityId {
    "Construction kit type id of the object."
    ckTypeId: CkTypeId!
    "Unique id of the object."
    rtId: OctoObjectId!
}

input SearchFilter {
    attributeNames: [String]
    language: String
    searchTerm: String!
    type: SearchFilterTypes
}

input Sort {
    attributeName: String!
    sortOrder: SortOrders
}

input SystemAutoIncrementInput {
    configuredBy: [RtAssociationInput]
    currentValue: Int
    end: Int
    rtWellKnownName: String
    start: Int
}

input SystemAutoIncrementInputUpdate {
    "Item to update"
    item: SystemAutoIncrementInput!
    rtId: OctoObjectId
}

input SystemBotAttributeAggregateConfigurationInput {
    autoCompleteFilter: String
    autoCompleteLimit: Int
    configuredBy: [RtAssociationInput]
    configures: [RtAssociationInput]
    isAutoCompleteEnabled: Boolean
    rtWellKnownName: String
}

input SystemBotAttributeAggregateConfigurationInputUpdate {
    "Item to update"
    item: SystemBotAttributeAggregateConfigurationInput!
    rtId: OctoObjectId
}

input SystemBotServiceHookInput {
    configuredBy: [RtAssociationInput]
    enabled: Boolean
    fieldFilter: String
    name: String
    queryCkTypeId: String
    rtWellKnownName: String
    serviceHookAction: String
    serviceHookApiKey: String
    serviceHookBaseUri: String
}

input SystemBotServiceHookInputUpdate {
    "Item to update"
    item: SystemBotServiceHookInput!
    rtId: OctoObjectId
}

input SystemConfigurationInput {
    configurationValue: String
    configuredBy: [RtAssociationInput]
    rtWellKnownName: String
}

input SystemConfigurationInputUpdate {
    "Item to update"
    item: SystemConfigurationInput!
    rtId: OctoObjectId
}

input SystemNotificationNotificationMessageInput {
    bodyText: String
    configuredBy: [RtAssociationInput]
    errorText: String
    lastTryDateTime: DateTime
    notificationType: SystemNotificationNotificationTypes
    recipientAddress: String
    rtWellKnownName: String
    sendStatus: SystemNotificationNotificationStates
    sentDateTime: DateTime
    subjectText: String
}

input SystemNotificationNotificationMessageInputUpdate {
    "Item to update"
    item: SystemNotificationNotificationMessageInput!
    rtId: OctoObjectId
}

input SystemNotificationNotificationTemplateInput {
    bodyTemplate: String
    configuredBy: [RtAssociationInput]
    rtWellKnownName: String
    subjectTemplate: String
    type: SystemNotificationNotificationTypes
}

input SystemNotificationNotificationTemplateInputUpdate {
    "Item to update"
    item: SystemNotificationNotificationTemplateInput!
    rtId: OctoObjectId
}

input SystemQueryInput {
    attributeSearchFilter: String
    columns: String
    configuredBy: [RtAssociationInput]
    fieldFilter: String
    name: String
    queryCkTypeId: String
    rtWellKnownName: String
    sorting: String
    textSearchFilter: String
}

input SystemQueryInputUpdate {
    "Item to update"
    item: SystemQueryInput!
    rtId: OctoObjectId
}

input SystemTenantInput {
    configuredBy: [RtAssociationInput]
    databaseName: String
    parentTenantId: String
    rtWellKnownName: String
    tenantId: String
}

input SystemTenantInputUpdate {
    "Item to update"
    item: SystemTenantInput!
    rtId: OctoObjectId
}
