# This file was generated. Do not edit manually.

schema {
    query: OctoQuery
    mutation: OctoMutation
    subscription: OctoSubscriptions
}

"Runtime entities of construction kit record 'Basic/Address'"
type BasicAddress {
    addressOfAdditionalLink: String
    addressRemarks: [String]
    cityTown: String
    constructionKitType: CkType
    department: String
    eMail: BasicEMail
    fax: BasicFaxNumber
    nationalCode: String
    pOBox: String
    phone: BasicPhoneNumber
    stateCounty: String
    street: String
    vATnumber: String
    zipOfPOBox: String
    zipcode: Int
}

"Runtime entities of construction kit type 'Basic/Asset'"
type BasicAsset {
    ckTypeId: CkTypeId
    configuredBy: BasicAsset_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    events: BasicAsset_EventsUnion
    name: String
    parent: BasicAsset_ParentUnion
    relatesTo: BasicAsset_RelatesToUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `BasicAsset`."
type BasicAssetConnection {
    "Information to aid in pagination."
    edges: [BasicAssetEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicAsset]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicAsset`."
type BasicAssetEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicAsset
}

type BasicAssetMutations {
    "Creates new entities of type 'BasicAsset'."
    create(entities: [BasicAssetInput]!): [BasicAsset]
    "Deletes an entity of type 'BasicAsset'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicAsset'."
    update(entities: [BasicAssetInputUpdate]!): [BasicAsset]
}

type BasicAssetUpdate {
    "The corresponding item"
    item: BasicAsset
    updateState: UpdateType
}

type BasicAssetUpdateMessage {
    "The corresponding items"
    items: [BasicAssetUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type BasicAsset"
type BasicAsset_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association Industry.Basic/EventSource (Inbound) of entity type BasicAsset"
type BasicAsset_EventsUnion {
    industryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicAlarmConnection
    industryBasicEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicEventConnection
}

"Association System/ParentChild (Outbound) of entity type BasicAsset"
type BasicAsset_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Association Basic/RelatedEquipment (Outbound) of entity type BasicAsset"
type BasicAsset_RelatesToUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Runtime entities of construction kit record 'Basic/EMail'"
type BasicEMail {
    constructionKitType: CkType
    eMail: String
    publicKey: String
    typeOfEMail: BasicTypeOfTelephoneBasic
    typeOfPublicKey: String
}

"Runtime entities of construction kit type 'Basic/Equipment'"
type BasicEquipment {
    ckTypeId: CkTypeId
    configuredBy: BasicEquipment_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String
    parent: BasicEquipment_ParentUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `BasicEquipment`."
type BasicEquipmentConnection {
    "Information to aid in pagination."
    edges: [BasicEquipmentEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicEquipment]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicEquipment`."
type BasicEquipmentEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicEquipment
}

"Runtime entities of construction kit type 'Basic/EquipmentGroup'"
type BasicEquipmentGroup {
    children: BasicEquipmentGroup_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: BasicEquipmentGroup_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String
    parent: BasicEquipmentGroup_ParentUnion
    relatesFrom: BasicEquipmentGroup_RelatesFromUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `BasicEquipmentGroup`."
type BasicEquipmentGroupConnection {
    "Information to aid in pagination."
    edges: [BasicEquipmentGroupEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicEquipmentGroup]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicEquipmentGroup`."
type BasicEquipmentGroupEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicEquipmentGroup
}

type BasicEquipmentGroupMutations {
    "Creates new entities of type 'BasicEquipmentGroup'."
    create(entities: [BasicEquipmentGroupInput]!): [BasicEquipmentGroup]
    "Deletes an entity of type 'BasicEquipmentGroup'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicEquipmentGroup'."
    update(entities: [BasicEquipmentGroupInputUpdate]!): [BasicEquipmentGroup]
}

type BasicEquipmentGroupUpdate {
    "The corresponding item"
    item: BasicEquipmentGroup
    updateState: UpdateType
}

type BasicEquipmentGroupUpdateMessage {
    "The corresponding items"
    items: [BasicEquipmentGroupUpdate]
}

"Association System/ParentChild (Inbound) of entity type BasicEquipmentGroup"
type BasicEquipmentGroup_ChildrenUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicEquipment(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentConnection
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
    industryBasicMachine(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicMachineConnection
    industryEnergyBattery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyBatteryConnection
    industryEnergyEnergyMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyEnergyMeterConnection
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
    industryEnergyPhotovoltaic(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicConnection
    industryEnergyPhotovoltaicModule(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicModuleConnection
    industryEnergyPhotovoltaicString(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicStringConnection
    industryFluidHeatMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidHeatMeterConnection
    industryFluidWaterMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidWaterMeterConnection
}

"Association System.Bot/Configures (Inbound) of entity type BasicEquipmentGroup"
type BasicEquipmentGroup_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type BasicEquipmentGroup"
type BasicEquipmentGroup_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
    basicEquipmentModel(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentModelConnection
}

"Association Basic/RelatedEquipment (Inbound) of entity type BasicEquipmentGroup"
type BasicEquipmentGroup_RelatesFromUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    industryBasicMachine(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicMachineConnection
    industryEnergyBattery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyBatteryConnection
    industryEnergyEnergyMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyEnergyMeterConnection
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
    industryEnergyPhotovoltaic(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicConnection
    industryEnergyPhotovoltaicModule(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicModuleConnection
    industryEnergyPhotovoltaicString(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicStringConnection
    industryFluidHeatMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidHeatMeterConnection
    industryFluidWaterMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidWaterMeterConnection
}

"Runtime entities of construction kit type 'Basic/EquipmentModel'"
type BasicEquipmentModel {
    children: BasicEquipmentModel_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: BasicEquipmentModel_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `BasicEquipmentModel`."
type BasicEquipmentModelConnection {
    "Information to aid in pagination."
    edges: [BasicEquipmentModelEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicEquipmentModel]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicEquipmentModel`."
type BasicEquipmentModelEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicEquipmentModel
}

type BasicEquipmentModelMutations {
    "Creates new entities of type 'BasicEquipmentModel'."
    create(entities: [BasicEquipmentModelInput]!): [BasicEquipmentModel]
    "Deletes an entity of type 'BasicEquipmentModel'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicEquipmentModel'."
    update(entities: [BasicEquipmentModelInputUpdate]!): [BasicEquipmentModel]
}

type BasicEquipmentModelUpdate {
    "The corresponding item"
    item: BasicEquipmentModel
    updateState: UpdateType
}

type BasicEquipmentModelUpdateMessage {
    "The corresponding items"
    items: [BasicEquipmentModelUpdate]
}

"Association System/ParentChild (Inbound) of entity type BasicEquipmentModel"
type BasicEquipmentModel_ChildrenUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Association System.Bot/Configures (Inbound) of entity type BasicEquipmentModel"
type BasicEquipmentModel_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

type BasicEquipmentUpdate {
    "The corresponding item"
    item: BasicEquipment
    updateState: UpdateType
}

type BasicEquipmentUpdateMessage {
    "The corresponding items"
    items: [BasicEquipmentUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type BasicEquipment"
type BasicEquipment_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type BasicEquipment"
type BasicEquipment_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Runtime entities of construction kit record 'Basic/FaxNumber'"
type BasicFaxNumber {
    constructionKitType: CkType
    number: String
    type: BasicTypeOfTelephoneBasic
}

"Runtime entities of construction kit record 'Basic/Marking'"
type BasicMarking {
    additionalText: String
    constructionKitType: CkType
    file: OctoObjectId
    name: String
}

"Runtime entities of construction kit record 'Basic/NamePlate'"
type BasicNamePlate {
    address: BasicAddress
    assetSpecificProperties: [BasicMarking]
    constructionKitType: CkType
    manufacturerName: String
    manufacturerProductDesignation: String
    manufacturerProductFamily: String
    markings: [BasicMarking]
    serialNumber: String
    yearOfConstruction: String
}

"Runtime entities of construction kit type 'Basic/NamedEntity'"
type BasicNamedEntity {
    ckTypeId: CkTypeId
    configuredBy: BasicNamedEntity_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `BasicNamedEntity`."
type BasicNamedEntityConnection {
    "Information to aid in pagination."
    edges: [BasicNamedEntityEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicNamedEntity]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicNamedEntity`."
type BasicNamedEntityEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicNamedEntity
}

type BasicNamedEntityUpdate {
    "The corresponding item"
    item: BasicNamedEntity
    updateState: UpdateType
}

type BasicNamedEntityUpdateMessage {
    "The corresponding items"
    items: [BasicNamedEntityUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type BasicNamedEntity"
type BasicNamedEntity_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit record 'Basic/PhoneNumber'"
type BasicPhoneNumber {
    constructionKitType: CkType
    number: String
    type: BasicTypeOfTelephoneEnhanced
}

"Construction kit attribute definitions"
type CkAttribute {
    "Value type of the attribute."
    attributeValueType: AttributeValueType!
    "Construction kit attribute id."
    ckAttributeId: CkAttributeId!
    "Optional enum id of the attribute value type."
    ckEnum: CkEnum
    "Optional record id of the attribute value type."
    ckRecord: CkRecord
    "Default values of the attribute."
    defaultValues: [SimpleScalarType]
    "Optional description of the attribute."
    description: String
    "Optional flag that tells if an attribute is a data stream."
    isDataStream: Boolean
    "Optional meta data of the attribute."
    metaData: [CkAttributeMetaData]
}

"A connection from an object to a list of objects of type `CkAttributeDto`."
type CkAttributeDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkAttributeDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkAttribute]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkAttributeDto`."
type CkAttributeDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkAttribute
}

"Construction kit attribute meta data"
type CkAttributeMetaData {
    "Optional description of the meta data."
    description: String
    "Key of the meta data."
    key: ID!
    "Value of the meta data."
    value: String
}

"A construction kit enum"
type CkEnum {
    "Unique id of the enum."
    ckEnumId: CkEnumId!
    "Use flags for the enum."
    useFlags: Boolean!
    "Value of the enum"
    values: [CkEnumValue]!
}

"A connection from an object to a list of objects of type `CkEnumDto`."
type CkEnumDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkEnumDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkEnum]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkEnumDto`."
type CkEnumDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkEnum
}

"A construction kit enum value"
type CkEnumValue {
    "Description of the enum"
    description: String
    "Key of the enum"
    key: Int
    "Value of the enum"
    name: String
}

"A construction kit record"
type CkRecord {
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Filter of attribute names"
        attributeNames: [String],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): CkTypeAttributeDtoConnection
    baseRecordTypes: CkType
    "Unique id of the object."
    ckRecordId: CkRecordId!
    derivedRecordTypes(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): CkTypeDtoConnection
    isAbstract: Boolean!
    isFinal: Boolean!
}

"A connection from an object to a list of objects of type `CkRecordDto`."
type CkRecordDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkRecordDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkRecord]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkRecordDto`."
type CkRecordDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkRecord
}

"A construction kit type"
type CkType {
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Filter of attribute names"
        attributeNames: [String],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): CkTypeAttributeDtoConnection
    baseType: CkType
    "Unique id of the object."
    ckTypeId: CkTypeId!
    derivedTypes(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): CkTypeDtoConnection
    isAbstract: Boolean!
    isFinal: Boolean!
}

"Attributes of a construction kit type"
type CkTypeAttribute {
    "The construction kit attribute definition"
    attribute: CkAttribute
    "Attribute name within the entity."
    attributeName: String!
    "Value type of the attribute."
    attributeValueType: AttributeValueType!
    "Auto complete values for the attribute."
    autoCompleteValues: [String]
    "Auto increment reference for the attribute."
    autoIncrementReference: String
    "Construction kit attribute id."
    ckAttributeId: CkAttributeId!
    "Defines if the attribute is optional."
    isOptional: Boolean!
}

"A connection from an object to a list of objects of type `CkTypeAttributeDto`."
type CkTypeAttributeDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkTypeAttributeDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkTypeAttribute]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkTypeAttributeDto`."
type CkTypeAttributeDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkTypeAttribute
}

"A connection from an object to a list of objects of type `CkTypeDto`."
type CkTypeDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkTypeDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkType]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkTypeDto`."
type CkTypeDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkType
}

type ConstructionKit {
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the entity with the given attribute id."
        ckId: String,
        "Returns entities with the given attribute ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkAttributeDtoConnection
    enums(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the enum with the given enum id."
        ckId: String,
        "Returns enums with the given enum ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkEnumDtoConnection
    records(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the record with the given record id."
        ckId: String,
        "Returns records with the given record ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkRecordDtoConnection
    types(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the construction kit type with the given id."
        ckId: String,
        "Returns the construction kit types with the given ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkTypeDtoConnection
}

"Runtime entities of construction kit type 'FireGuardians/Restaurant'"
type FireGuardiansRestaurant {
    ckTypeId: CkTypeId
    configuredBy: FireGuardiansRestaurant_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    location: RtGeospatialValueDtoType
    name: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `FireGuardiansRestaurant`."
type FireGuardiansRestaurantConnection {
    "Information to aid in pagination."
    edges: [FireGuardiansRestaurantEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [FireGuardiansRestaurant]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `FireGuardiansRestaurant`."
type FireGuardiansRestaurantEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: FireGuardiansRestaurant
}

type FireGuardiansRestaurantMutations {
    "Creates new entities of type 'FireGuardiansRestaurant'."
    create(entities: [FireGuardiansRestaurantInput]!): [FireGuardiansRestaurant]
    "Deletes an entity of type 'FireGuardiansRestaurant'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'FireGuardiansRestaurant'."
    update(entities: [FireGuardiansRestaurantInputUpdate]!): [FireGuardiansRestaurant]
}

type FireGuardiansRestaurantUpdate {
    "The corresponding item"
    item: FireGuardiansRestaurant
    updateState: UpdateType
}

type FireGuardiansRestaurantUpdateMessage {
    "The corresponding items"
    items: [FireGuardiansRestaurantUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type FireGuardiansRestaurant"
type FireGuardiansRestaurant_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'Industry.Basic/Alarm'"
type IndustryBasicAlarm {
    cause: String
    ckTypeId: CkTypeId
    configuredBy: IndustryBasicAlarm_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    eventSource: IndustryBasicAlarm_EventSourceUnion
    group: String
    message: String
    name: String
    reactivatedCount: Int
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    source: IndustryBasicEventAlarmSource
    state: IndustryBasicEventAlarmState
    time: DateTime
    type: IndustryBasicEventAlarmType
}

"A connection to `IndustryBasicAlarm`."
type IndustryBasicAlarmConnection {
    "Information to aid in pagination."
    edges: [IndustryBasicAlarmEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [IndustryBasicAlarm]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `IndustryBasicAlarm`."
type IndustryBasicAlarmEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: IndustryBasicAlarm
}

type IndustryBasicAlarmMutations {
    "Creates new entities of type 'IndustryBasicAlarm'."
    create(entities: [IndustryBasicAlarmInput]!): [IndustryBasicAlarm]
    "Deletes an entity of type 'IndustryBasicAlarm'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'IndustryBasicAlarm'."
    update(entities: [IndustryBasicAlarmInputUpdate]!): [IndustryBasicAlarm]
}

type IndustryBasicAlarmUpdate {
    "The corresponding item"
    item: IndustryBasicAlarm
    updateState: UpdateType
}

type IndustryBasicAlarmUpdateMessage {
    "The corresponding items"
    items: [IndustryBasicAlarmUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type IndustryBasicAlarm"
type IndustryBasicAlarm_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association Industry.Basic/EventSource (Outbound) of entity type IndustryBasicAlarm"
type IndustryBasicAlarm_EventSourceUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    industryBasicMachine(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicMachineConnection
    industryEnergyBattery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyBatteryConnection
    industryEnergyEnergyMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyEnergyMeterConnection
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
    industryEnergyPhotovoltaic(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicConnection
    industryEnergyPhotovoltaicModule(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicModuleConnection
    industryEnergyPhotovoltaicString(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicStringConnection
    industryFluidHeatMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidHeatMeterConnection
    industryFluidWaterMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidWaterMeterConnection
}

"Runtime entities of construction kit type 'Industry.Basic/Event'"
type IndustryBasicEvent {
    ckTypeId: CkTypeId
    configuredBy: IndustryBasicEvent_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    eventSource: IndustryBasicEvent_EventSourceUnion
    message: String
    name: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    time: DateTime
}

"A connection to `IndustryBasicEvent`."
type IndustryBasicEventConnection {
    "Information to aid in pagination."
    edges: [IndustryBasicEventEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [IndustryBasicEvent]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `IndustryBasicEvent`."
type IndustryBasicEventEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: IndustryBasicEvent
}

type IndustryBasicEventMutations {
    "Creates new entities of type 'IndustryBasicEvent'."
    create(entities: [IndustryBasicEventInput]!): [IndustryBasicEvent]
    "Deletes an entity of type 'IndustryBasicEvent'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'IndustryBasicEvent'."
    update(entities: [IndustryBasicEventInputUpdate]!): [IndustryBasicEvent]
}

type IndustryBasicEventUpdate {
    "The corresponding item"
    item: IndustryBasicEvent
    updateState: UpdateType
}

type IndustryBasicEventUpdateMessage {
    "The corresponding items"
    items: [IndustryBasicEventUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type IndustryBasicEvent"
type IndustryBasicEvent_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association Industry.Basic/EventSource (Outbound) of entity type IndustryBasicEvent"
type IndustryBasicEvent_EventSourceUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    industryBasicMachine(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicMachineConnection
    industryEnergyBattery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyBatteryConnection
    industryEnergyEnergyMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyEnergyMeterConnection
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
    industryEnergyPhotovoltaic(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicConnection
    industryEnergyPhotovoltaicModule(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicModuleConnection
    industryEnergyPhotovoltaicString(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicStringConnection
    industryFluidHeatMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidHeatMeterConnection
    industryFluidWaterMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidWaterMeterConnection
}

"Runtime entities of construction kit type 'Industry.Basic/Machine'"
type IndustryBasicMachine {
    children: IndustryBasicMachine_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: IndustryBasicMachine_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    events: IndustryBasicMachine_EventsUnion
    name: String
    namePlate: BasicNamePlate
    operatingHours: Int
    parent: IndustryBasicMachine_ParentUnion
    relatesTo: IndustryBasicMachine_RelatesToUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    standStillCounter: Int
    state: IndustryBasicState
}

"A connection to `IndustryBasicMachine`."
type IndustryBasicMachineConnection {
    "Information to aid in pagination."
    edges: [IndustryBasicMachineEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [IndustryBasicMachine]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `IndustryBasicMachine`."
type IndustryBasicMachineEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: IndustryBasicMachine
}

type IndustryBasicMachineMutations {
    "Creates new entities of type 'IndustryBasicMachine'."
    create(entities: [IndustryBasicMachineInput]!): [IndustryBasicMachine]
    "Deletes an entity of type 'IndustryBasicMachine'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'IndustryBasicMachine'."
    update(entities: [IndustryBasicMachineInputUpdate]!): [IndustryBasicMachine]
}

type IndustryBasicMachineUpdate {
    "The corresponding item"
    item: IndustryBasicMachine
    updateState: UpdateType
}

type IndustryBasicMachineUpdateMessage {
    "The corresponding items"
    items: [IndustryBasicMachineUpdate]
}

"Association System/ParentChild (Inbound) of entity type IndustryBasicMachine"
type IndustryBasicMachine_ChildrenUnion {
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
}

"Association System.Bot/Configures (Inbound) of entity type IndustryBasicMachine"
type IndustryBasicMachine_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association Industry.Basic/EventSource (Inbound) of entity type IndustryBasicMachine"
type IndustryBasicMachine_EventsUnion {
    industryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicAlarmConnection
    industryBasicEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicEventConnection
}

"Association System/ParentChild (Outbound) of entity type IndustryBasicMachine"
type IndustryBasicMachine_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Association Basic/RelatedEquipment (Outbound) of entity type IndustryBasicMachine"
type IndustryBasicMachine_RelatesToUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Runtime entities of construction kit type 'Industry.Energy/Battery'"
type IndustryEnergyBattery {
    ampere: Decimal
    capacity: Decimal
    children: IndustryEnergyBattery_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: IndustryEnergyBattery_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    events: IndustryEnergyBattery_EventsUnion
    exportedEnergy: Decimal
    importedEnergy: Decimal
    name: String
    namePlate: BasicNamePlate
    numofCycles: Int
    operatingHours: Int
    parent: IndustryEnergyBattery_ParentUnion
    power: Decimal
    relatesTo: IndustryEnergyBattery_RelatesToUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    soC: Int
    soH: Int
    standStillCounter: Int
    state: IndustryBasicState
    temperature: Decimal
    voltage: Decimal
}

"A connection to `IndustryEnergyBattery`."
type IndustryEnergyBatteryConnection {
    "Information to aid in pagination."
    edges: [IndustryEnergyBatteryEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [IndustryEnergyBattery]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `IndustryEnergyBattery`."
type IndustryEnergyBatteryEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: IndustryEnergyBattery
}

type IndustryEnergyBatteryMutations {
    "Creates new entities of type 'IndustryEnergyBattery'."
    create(entities: [IndustryEnergyBatteryInput]!): [IndustryEnergyBattery]
    "Deletes an entity of type 'IndustryEnergyBattery'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'IndustryEnergyBattery'."
    update(entities: [IndustryEnergyBatteryInputUpdate]!): [IndustryEnergyBattery]
}

type IndustryEnergyBatteryUpdate {
    "The corresponding item"
    item: IndustryEnergyBattery
    updateState: UpdateType
}

type IndustryEnergyBatteryUpdateMessage {
    "The corresponding items"
    items: [IndustryEnergyBatteryUpdate]
}

"Association System/ParentChild (Inbound) of entity type IndustryEnergyBattery"
type IndustryEnergyBattery_ChildrenUnion {
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
}

"Association System.Bot/Configures (Inbound) of entity type IndustryEnergyBattery"
type IndustryEnergyBattery_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association Industry.Basic/EventSource (Inbound) of entity type IndustryEnergyBattery"
type IndustryEnergyBattery_EventsUnion {
    industryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicAlarmConnection
    industryBasicEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicEventConnection
}

"Association System/ParentChild (Outbound) of entity type IndustryEnergyBattery"
type IndustryEnergyBattery_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
}

"Association Basic/RelatedEquipment (Outbound) of entity type IndustryEnergyBattery"
type IndustryEnergyBattery_RelatesToUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Runtime entities of construction kit type 'Industry.Energy/EnergyMeter'"
type IndustryEnergyEnergyMeter {
    aCL1: IndustryEnergyPhaseInfo
    aCL2: IndustryEnergyPhaseInfo
    aCL3: IndustryEnergyPhaseInfo
    ampere: Decimal
    apparentPower: Decimal
    children: IndustryEnergyEnergyMeter_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: IndustryEnergyEnergyMeter_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    events: IndustryEnergyEnergyMeter_EventsUnion
    exportedEnergy: Decimal
    frequency: Decimal
    importedEnergy: Decimal
    name: String
    namePlate: BasicNamePlate
    operatingHours: Int
    parent: IndustryEnergyEnergyMeter_ParentUnion
    power: Decimal
    reactivePower: Decimal
    relatesTo: IndustryEnergyEnergyMeter_RelatesToUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    standStillCounter: Int
    state: IndustryBasicState
    voltage: Decimal
}

"A connection to `IndustryEnergyEnergyMeter`."
type IndustryEnergyEnergyMeterConnection {
    "Information to aid in pagination."
    edges: [IndustryEnergyEnergyMeterEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [IndustryEnergyEnergyMeter]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `IndustryEnergyEnergyMeter`."
type IndustryEnergyEnergyMeterEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: IndustryEnergyEnergyMeter
}

type IndustryEnergyEnergyMeterMutations {
    "Creates new entities of type 'IndustryEnergyEnergyMeter'."
    create(entities: [IndustryEnergyEnergyMeterInput]!): [IndustryEnergyEnergyMeter]
    "Deletes an entity of type 'IndustryEnergyEnergyMeter'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'IndustryEnergyEnergyMeter'."
    update(entities: [IndustryEnergyEnergyMeterInputUpdate]!): [IndustryEnergyEnergyMeter]
}

type IndustryEnergyEnergyMeterUpdate {
    "The corresponding item"
    item: IndustryEnergyEnergyMeter
    updateState: UpdateType
}

type IndustryEnergyEnergyMeterUpdateMessage {
    "The corresponding items"
    items: [IndustryEnergyEnergyMeterUpdate]
}

"Association System/ParentChild (Inbound) of entity type IndustryEnergyEnergyMeter"
type IndustryEnergyEnergyMeter_ChildrenUnion {
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
}

"Association System.Bot/Configures (Inbound) of entity type IndustryEnergyEnergyMeter"
type IndustryEnergyEnergyMeter_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association Industry.Basic/EventSource (Inbound) of entity type IndustryEnergyEnergyMeter"
type IndustryEnergyEnergyMeter_EventsUnion {
    industryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicAlarmConnection
    industryBasicEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicEventConnection
}

"Association System/ParentChild (Outbound) of entity type IndustryEnergyEnergyMeter"
type IndustryEnergyEnergyMeter_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Association Basic/RelatedEquipment (Outbound) of entity type IndustryEnergyEnergyMeter"
type IndustryEnergyEnergyMeter_RelatesToUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Runtime entities of construction kit type 'Industry.Energy/Inverter'"
type IndustryEnergyInverter {
    aCL1: IndustryEnergyPhaseInfo
    aCL2: IndustryEnergyPhaseInfo
    aCL3: IndustryEnergyPhaseInfo
    ampere: Decimal
    children: IndustryEnergyInverter_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: IndustryEnergyInverter_ConfiguredByUnion
    constructionKitType: CkType
    dCAmpere: Decimal
    dCVoltage: Decimal
    description: String
    events: IndustryEnergyInverter_EventsUnion
    maximumPower: Decimal
    name: String
    namePlate: BasicNamePlate
    operatingHours: Int
    parent: IndustryEnergyInverter_ParentUnion
    power: Decimal
    relatesTo: IndustryEnergyInverter_RelatesToUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    standStillCounter: Int
    state: IndustryBasicState
    voltage: Decimal
}

"A connection to `IndustryEnergyInverter`."
type IndustryEnergyInverterConnection {
    "Information to aid in pagination."
    edges: [IndustryEnergyInverterEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [IndustryEnergyInverter]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `IndustryEnergyInverter`."
type IndustryEnergyInverterEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: IndustryEnergyInverter
}

type IndustryEnergyInverterMutations {
    "Creates new entities of type 'IndustryEnergyInverter'."
    create(entities: [IndustryEnergyInverterInput]!): [IndustryEnergyInverter]
    "Deletes an entity of type 'IndustryEnergyInverter'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'IndustryEnergyInverter'."
    update(entities: [IndustryEnergyInverterInputUpdate]!): [IndustryEnergyInverter]
}

type IndustryEnergyInverterUpdate {
    "The corresponding item"
    item: IndustryEnergyInverter
    updateState: UpdateType
}

type IndustryEnergyInverterUpdateMessage {
    "The corresponding items"
    items: [IndustryEnergyInverterUpdate]
}

"Association System/ParentChild (Inbound) of entity type IndustryEnergyInverter"
type IndustryEnergyInverter_ChildrenUnion {
    industryEnergyBattery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyBatteryConnection
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
    industryEnergyPhotovoltaicString(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicStringConnection
}

"Association System.Bot/Configures (Inbound) of entity type IndustryEnergyInverter"
type IndustryEnergyInverter_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association Industry.Basic/EventSource (Inbound) of entity type IndustryEnergyInverter"
type IndustryEnergyInverter_EventsUnion {
    industryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicAlarmConnection
    industryBasicEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicEventConnection
}

"Association System/ParentChild (Outbound) of entity type IndustryEnergyInverter"
type IndustryEnergyInverter_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
    industryBasicMachine(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicMachineConnection
    industryEnergyBattery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyBatteryConnection
    industryEnergyEnergyMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyEnergyMeterConnection
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
    industryEnergyPhotovoltaic(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicConnection
    industryEnergyPhotovoltaicModule(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicModuleConnection
    industryFluidHeatMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidHeatMeterConnection
    industryFluidWaterMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidWaterMeterConnection
}

"Association Basic/RelatedEquipment (Outbound) of entity type IndustryEnergyInverter"
type IndustryEnergyInverter_RelatesToUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Runtime entities of construction kit record 'Industry.Energy/PhaseInfo'"
type IndustryEnergyPhaseInfo {
    ampere: Decimal
    constructionKitType: CkType
    frequency: Decimal
    power: Decimal
    voltage: Decimal
}

"Runtime entities of construction kit type 'Industry.Energy/Photovoltaic'"
type IndustryEnergyPhotovoltaic {
    children: IndustryEnergyPhotovoltaic_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: IndustryEnergyPhotovoltaic_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    events: IndustryEnergyPhotovoltaic_EventsUnion
    name: String
    parent: IndustryEnergyPhotovoltaic_ParentUnion
    relatesTo: IndustryEnergyPhotovoltaic_RelatesToUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `IndustryEnergyPhotovoltaic`."
type IndustryEnergyPhotovoltaicConnection {
    "Information to aid in pagination."
    edges: [IndustryEnergyPhotovoltaicEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [IndustryEnergyPhotovoltaic]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `IndustryEnergyPhotovoltaic`."
type IndustryEnergyPhotovoltaicEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: IndustryEnergyPhotovoltaic
}

"Runtime entities of construction kit type 'Industry.Energy/Photovoltaic.Module'"
type IndustryEnergyPhotovoltaicModule {
    children: IndustryEnergyPhotovoltaicModule_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: IndustryEnergyPhotovoltaicModule_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    events: IndustryEnergyPhotovoltaicModule_EventsUnion
    name: String
    namePlate: BasicNamePlate
    operatingHours: Int
    parent: IndustryEnergyPhotovoltaicModule_ParentUnion
    peakPower: Decimal
    power: Decimal
    relatesTo: IndustryEnergyPhotovoltaicModule_RelatesToUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    standStillCounter: Int
    state: IndustryBasicState
}

"A connection to `IndustryEnergyPhotovoltaicModule`."
type IndustryEnergyPhotovoltaicModuleConnection {
    "Information to aid in pagination."
    edges: [IndustryEnergyPhotovoltaicModuleEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [IndustryEnergyPhotovoltaicModule]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `IndustryEnergyPhotovoltaicModule`."
type IndustryEnergyPhotovoltaicModuleEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: IndustryEnergyPhotovoltaicModule
}

type IndustryEnergyPhotovoltaicModuleMutations {
    "Creates new entities of type 'IndustryEnergyPhotovoltaicModule'."
    create(entities: [IndustryEnergyPhotovoltaicModuleInput]!): [IndustryEnergyPhotovoltaicModule]
    "Deletes an entity of type 'IndustryEnergyPhotovoltaicModule'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'IndustryEnergyPhotovoltaicModule'."
    update(entities: [IndustryEnergyPhotovoltaicModuleInputUpdate]!): [IndustryEnergyPhotovoltaicModule]
}

type IndustryEnergyPhotovoltaicModuleUpdate {
    "The corresponding item"
    item: IndustryEnergyPhotovoltaicModule
    updateState: UpdateType
}

type IndustryEnergyPhotovoltaicModuleUpdateMessage {
    "The corresponding items"
    items: [IndustryEnergyPhotovoltaicModuleUpdate]
}

"Association System/ParentChild (Inbound) of entity type IndustryEnergyPhotovoltaicModule"
type IndustryEnergyPhotovoltaicModule_ChildrenUnion {
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
}

"Association System.Bot/Configures (Inbound) of entity type IndustryEnergyPhotovoltaicModule"
type IndustryEnergyPhotovoltaicModule_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association Industry.Basic/EventSource (Inbound) of entity type IndustryEnergyPhotovoltaicModule"
type IndustryEnergyPhotovoltaicModule_EventsUnion {
    industryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicAlarmConnection
    industryBasicEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicEventConnection
}

"Association System/ParentChild (Outbound) of entity type IndustryEnergyPhotovoltaicModule"
type IndustryEnergyPhotovoltaicModule_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
    industryEnergyPhotovoltaicString(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicStringConnection
}

"Association Basic/RelatedEquipment (Outbound) of entity type IndustryEnergyPhotovoltaicModule"
type IndustryEnergyPhotovoltaicModule_RelatesToUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

type IndustryEnergyPhotovoltaicMutations {
    "Creates new entities of type 'IndustryEnergyPhotovoltaic'."
    create(entities: [IndustryEnergyPhotovoltaicInput]!): [IndustryEnergyPhotovoltaic]
    "Deletes an entity of type 'IndustryEnergyPhotovoltaic'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'IndustryEnergyPhotovoltaic'."
    update(entities: [IndustryEnergyPhotovoltaicInputUpdate]!): [IndustryEnergyPhotovoltaic]
}

"Runtime entities of construction kit type 'Industry.Energy/Photovoltaic.String'"
type IndustryEnergyPhotovoltaicString {
    children: IndustryEnergyPhotovoltaicString_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: IndustryEnergyPhotovoltaicString_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    events: IndustryEnergyPhotovoltaicString_EventsUnion
    name: String
    numOfModules: Int
    parent: IndustryEnergyPhotovoltaicString_ParentUnion
    power: Decimal
    relatesTo: IndustryEnergyPhotovoltaicString_RelatesToUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `IndustryEnergyPhotovoltaicString`."
type IndustryEnergyPhotovoltaicStringConnection {
    "Information to aid in pagination."
    edges: [IndustryEnergyPhotovoltaicStringEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [IndustryEnergyPhotovoltaicString]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `IndustryEnergyPhotovoltaicString`."
type IndustryEnergyPhotovoltaicStringEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: IndustryEnergyPhotovoltaicString
}

type IndustryEnergyPhotovoltaicStringMutations {
    "Creates new entities of type 'IndustryEnergyPhotovoltaicString'."
    create(entities: [IndustryEnergyPhotovoltaicStringInput]!): [IndustryEnergyPhotovoltaicString]
    "Deletes an entity of type 'IndustryEnergyPhotovoltaicString'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'IndustryEnergyPhotovoltaicString'."
    update(entities: [IndustryEnergyPhotovoltaicStringInputUpdate]!): [IndustryEnergyPhotovoltaicString]
}

type IndustryEnergyPhotovoltaicStringUpdate {
    "The corresponding item"
    item: IndustryEnergyPhotovoltaicString
    updateState: UpdateType
}

type IndustryEnergyPhotovoltaicStringUpdateMessage {
    "The corresponding items"
    items: [IndustryEnergyPhotovoltaicStringUpdate]
}

"Association System/ParentChild (Inbound) of entity type IndustryEnergyPhotovoltaicString"
type IndustryEnergyPhotovoltaicString_ChildrenUnion {
    industryEnergyPhotovoltaicModule(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicModuleConnection
}

"Association System.Bot/Configures (Inbound) of entity type IndustryEnergyPhotovoltaicString"
type IndustryEnergyPhotovoltaicString_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association Industry.Basic/EventSource (Inbound) of entity type IndustryEnergyPhotovoltaicString"
type IndustryEnergyPhotovoltaicString_EventsUnion {
    industryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicAlarmConnection
    industryBasicEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicEventConnection
}

"Association System/ParentChild (Outbound) of entity type IndustryEnergyPhotovoltaicString"
type IndustryEnergyPhotovoltaicString_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
}

"Association Basic/RelatedEquipment (Outbound) of entity type IndustryEnergyPhotovoltaicString"
type IndustryEnergyPhotovoltaicString_RelatesToUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

type IndustryEnergyPhotovoltaicUpdate {
    "The corresponding item"
    item: IndustryEnergyPhotovoltaic
    updateState: UpdateType
}

type IndustryEnergyPhotovoltaicUpdateMessage {
    "The corresponding items"
    items: [IndustryEnergyPhotovoltaicUpdate]
}

"Association System/ParentChild (Inbound) of entity type IndustryEnergyPhotovoltaic"
type IndustryEnergyPhotovoltaic_ChildrenUnion {
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
}

"Association System.Bot/Configures (Inbound) of entity type IndustryEnergyPhotovoltaic"
type IndustryEnergyPhotovoltaic_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association Industry.Basic/EventSource (Inbound) of entity type IndustryEnergyPhotovoltaic"
type IndustryEnergyPhotovoltaic_EventsUnion {
    industryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicAlarmConnection
    industryBasicEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicEventConnection
}

"Association System/ParentChild (Outbound) of entity type IndustryEnergyPhotovoltaic"
type IndustryEnergyPhotovoltaic_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Association Basic/RelatedEquipment (Outbound) of entity type IndustryEnergyPhotovoltaic"
type IndustryEnergyPhotovoltaic_RelatesToUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Runtime entities of construction kit type 'Industry.Fluid/HeatMeter'"
type IndustryFluidHeatMeter {
    children: IndustryFluidHeatMeter_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: IndustryFluidHeatMeter_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    events: IndustryFluidHeatMeter_EventsUnion
    flow: Decimal
    flowTemperature: Decimal
    importedEnergy: Decimal
    name: String
    namePlate: BasicNamePlate
    operatingHours: Int
    parent: IndustryFluidHeatMeter_ParentUnion
    power: Decimal
    relatesTo: IndustryFluidHeatMeter_RelatesToUnion
    returnTemperature: Decimal
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    standStillCounter: Int
    state: IndustryBasicState
    volume: Decimal
}

"A connection to `IndustryFluidHeatMeter`."
type IndustryFluidHeatMeterConnection {
    "Information to aid in pagination."
    edges: [IndustryFluidHeatMeterEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [IndustryFluidHeatMeter]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `IndustryFluidHeatMeter`."
type IndustryFluidHeatMeterEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: IndustryFluidHeatMeter
}

type IndustryFluidHeatMeterMutations {
    "Creates new entities of type 'IndustryFluidHeatMeter'."
    create(entities: [IndustryFluidHeatMeterInput]!): [IndustryFluidHeatMeter]
    "Deletes an entity of type 'IndustryFluidHeatMeter'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'IndustryFluidHeatMeter'."
    update(entities: [IndustryFluidHeatMeterInputUpdate]!): [IndustryFluidHeatMeter]
}

type IndustryFluidHeatMeterUpdate {
    "The corresponding item"
    item: IndustryFluidHeatMeter
    updateState: UpdateType
}

type IndustryFluidHeatMeterUpdateMessage {
    "The corresponding items"
    items: [IndustryFluidHeatMeterUpdate]
}

"Association System/ParentChild (Inbound) of entity type IndustryFluidHeatMeter"
type IndustryFluidHeatMeter_ChildrenUnion {
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
}

"Association System.Bot/Configures (Inbound) of entity type IndustryFluidHeatMeter"
type IndustryFluidHeatMeter_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association Industry.Basic/EventSource (Inbound) of entity type IndustryFluidHeatMeter"
type IndustryFluidHeatMeter_EventsUnion {
    industryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicAlarmConnection
    industryBasicEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicEventConnection
}

"Association System/ParentChild (Outbound) of entity type IndustryFluidHeatMeter"
type IndustryFluidHeatMeter_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Association Basic/RelatedEquipment (Outbound) of entity type IndustryFluidHeatMeter"
type IndustryFluidHeatMeter_RelatesToUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Runtime entities of construction kit type 'Industry.Fluid/WaterMeter'"
type IndustryFluidWaterMeter {
    avgWaterTemperature: Decimal
    children: IndustryFluidWaterMeter_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: IndustryFluidWaterMeter_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    events: IndustryFluidWaterMeter_EventsUnion
    maxWaterTemperature: Decimal
    minWaterTemperature: Decimal
    name: String
    namePlate: BasicNamePlate
    netVolume: Decimal
    operatingHours: Int
    parent: IndustryFluidWaterMeter_ParentUnion
    relatesTo: IndustryFluidWaterMeter_RelatesToUnion
    reverseVolume: Decimal
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    standStillCounter: Int
    state: IndustryBasicState
    volume: Decimal
}

"A connection to `IndustryFluidWaterMeter`."
type IndustryFluidWaterMeterConnection {
    "Information to aid in pagination."
    edges: [IndustryFluidWaterMeterEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [IndustryFluidWaterMeter]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `IndustryFluidWaterMeter`."
type IndustryFluidWaterMeterEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: IndustryFluidWaterMeter
}

type IndustryFluidWaterMeterMutations {
    "Creates new entities of type 'IndustryFluidWaterMeter'."
    create(entities: [IndustryFluidWaterMeterInput]!): [IndustryFluidWaterMeter]
    "Deletes an entity of type 'IndustryFluidWaterMeter'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'IndustryFluidWaterMeter'."
    update(entities: [IndustryFluidWaterMeterInputUpdate]!): [IndustryFluidWaterMeter]
}

type IndustryFluidWaterMeterUpdate {
    "The corresponding item"
    item: IndustryFluidWaterMeter
    updateState: UpdateType
}

type IndustryFluidWaterMeterUpdateMessage {
    "The corresponding items"
    items: [IndustryFluidWaterMeterUpdate]
}

"Association System/ParentChild (Inbound) of entity type IndustryFluidWaterMeter"
type IndustryFluidWaterMeter_ChildrenUnion {
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
}

"Association System.Bot/Configures (Inbound) of entity type IndustryFluidWaterMeter"
type IndustryFluidWaterMeter_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association Industry.Basic/EventSource (Inbound) of entity type IndustryFluidWaterMeter"
type IndustryFluidWaterMeter_EventsUnion {
    industryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicAlarmConnection
    industryBasicEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicEventConnection
}

"Association System/ParentChild (Outbound) of entity type IndustryFluidWaterMeter"
type IndustryFluidWaterMeter_ParentUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Association Basic/RelatedEquipment (Outbound) of entity type IndustryFluidWaterMeter"
type IndustryFluidWaterMeter_RelatesToUnion {
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
}

"Meta information for large binaries"
type LargeBinaryInfo {
    "Returns the id of binary"
    binaryId: OctoObjectId!
    "Returns the content type of the binary"
    contentType: String!
    "Returns the download link of the binary"
    downloadUri: Uri!
    "Returns the filename of the binary"
    filename: String!
    "Returns the lengths of the binary"
    length: BigInt!
    "Returns the uploaded date time of the binary"
    uploadDateTime: DateTime!
}

"A connection from an object to a list of objects of type `LargeBinaryInfoDto`."
type LargeBinaryInfoDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [LargeBinaryInfoDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [LargeBinaryInfo]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `LargeBinaryInfoDto`."
type LargeBinaryInfoDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: LargeBinaryInfo
}

type OctoMutation {
    runtime: Runtime
    "Uploads a large binary and stores it. ID of file is returned."
    sysCreateLargeBinary(binaryData: LargeBinary!): OctoObjectId
}

type OctoQuery {
    constructionKit: ConstructionKit
    runtime: RuntimeModelQuery
    streamData: TimeseriesModelQuery
    sysLargeBinaries(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "ID of large binary that is requested."
        largeBinaryId: OctoObjectId
    ): LargeBinaryInfoDtoConnection
}

type OctoSubscriptions {
    basicAssetEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicAssetUpdateMessage
    basicEquipmentEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicEquipmentUpdateMessage
    basicEquipmentGroupEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicEquipmentGroupUpdateMessage
    basicEquipmentModelEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicEquipmentModelUpdateMessage
    basicNamedEntityEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicNamedEntityUpdateMessage
    fireGuardiansRestaurantEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): FireGuardiansRestaurantUpdateMessage
    industryBasicAlarmEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): IndustryBasicAlarmUpdateMessage
    industryBasicEventEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): IndustryBasicEventUpdateMessage
    industryBasicMachineEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): IndustryBasicMachineUpdateMessage
    industryEnergyBatteryEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): IndustryEnergyBatteryUpdateMessage
    industryEnergyEnergyMeterEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): IndustryEnergyEnergyMeterUpdateMessage
    industryEnergyInverterEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): IndustryEnergyInverterUpdateMessage
    industryEnergyPhotovoltaicEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): IndustryEnergyPhotovoltaicUpdateMessage
    industryEnergyPhotovoltaicModuleEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): IndustryEnergyPhotovoltaicModuleUpdateMessage
    industryEnergyPhotovoltaicStringEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): IndustryEnergyPhotovoltaicStringUpdateMessage
    industryFluidHeatMeterEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): IndustryFluidHeatMeterUpdateMessage
    industryFluidWaterMeterEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): IndustryFluidWaterMeterUpdateMessage
    systemAutoIncrementEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemAutoIncrementUpdateMessage
    systemBotAttributeAggregateConfigurationEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemBotAttributeAggregateConfigurationUpdateMessage
    systemBotServiceHookEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemBotServiceHookUpdateMessage
    systemCommunicationAdapterEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemCommunicationAdapterUpdateMessage
    systemCommunicationDataPipelineEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemCommunicationDataPipelineUpdateMessage
    systemCommunicationDataPipelineTriggerEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemCommunicationDataPipelineTriggerUpdateMessage
    systemCommunicationDeployableEntityEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemCommunicationDeployableEntityUpdateMessage
    systemCommunicationEdgeAdapterEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemCommunicationEdgeAdapterUpdateMessage
    systemCommunicationEdgePipelineEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemCommunicationEdgePipelineUpdateMessage
    systemCommunicationMeshAdapterEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemCommunicationMeshAdapterUpdateMessage
    systemCommunicationMeshPipelineEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemCommunicationMeshPipelineUpdateMessage
    systemCommunicationPipelineEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemCommunicationPipelineUpdateMessage
    systemCommunicationPoolEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemCommunicationPoolUpdateMessage
    systemConfigurationEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemConfigurationUpdateMessage
    systemEntityEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemEntityUpdateMessage
    systemNotificationNotificationMessageEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemNotificationNotificationMessageUpdateMessage
    systemNotificationNotificationTemplateEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemNotificationNotificationTemplateUpdateMessage
    systemQueryEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemQueryUpdateMessage
    systemTenantEvents(rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemTenantUpdateMessage
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type Point {
    coordinates: Position
}

type Position {
    altitude: Float
    latitude: Float!
    longitude: Float!
}

"A runtime entity type of Octo"
type RtEntity {
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Filter of attribute names"
        attributeNames: [String],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): RtEntityAttributeDtoConnection
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId
    rtWellKnownName: String
}

"Attribute of a runtime entity"
type RtEntityAttribute {
    "Attribute name within the entity."
    attributeName: String
    "Value of a scalar attribute."
    value: SimpleScalarType
}

"A connection from an object to a list of objects of type `RtEntityAttributeDto`."
type RtEntityAttributeDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [RtEntityAttributeDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [RtEntityAttribute]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `RtEntityAttributeDto`."
type RtEntityAttributeDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: RtEntityAttribute
}

"A connection from an object to a list of objects of type `RtEntityGenericDto`."
type RtEntityGenericDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [RtEntityGenericDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [RtEntity]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `RtEntityGenericDto`."
type RtEntityGenericDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: RtEntity
}

type RtGeospatialValueDtoType {
    distance: Float
    point: Point
}

type Runtime {
    "Mutation for entities of type 'BasicAsset'."
    basicAssets: BasicAssetMutations
    "Mutation for entities of type 'BasicEquipmentGroup'."
    basicEquipmentGroups: BasicEquipmentGroupMutations
    "Mutation for entities of type 'BasicEquipmentModel'."
    basicEquipmentModels: BasicEquipmentModelMutations
    "Mutation for entities of type 'FireGuardiansRestaurant'."
    fireGuardiansRestaurants: FireGuardiansRestaurantMutations
    "Mutation for entities of type 'IndustryBasicAlarm'."
    industryBasicAlarms: IndustryBasicAlarmMutations
    "Mutation for entities of type 'IndustryBasicEvent'."
    industryBasicEvents: IndustryBasicEventMutations
    "Mutation for entities of type 'IndustryBasicMachine'."
    industryBasicMachines: IndustryBasicMachineMutations
    "Mutation for entities of type 'IndustryEnergyBattery'."
    industryEnergyBatterys: IndustryEnergyBatteryMutations
    "Mutation for entities of type 'IndustryEnergyEnergyMeter'."
    industryEnergyEnergyMeters: IndustryEnergyEnergyMeterMutations
    "Mutation for entities of type 'IndustryEnergyInverter'."
    industryEnergyInverters: IndustryEnergyInverterMutations
    "Mutation for entities of type 'IndustryEnergyPhotovoltaicModule'."
    industryEnergyPhotovoltaicModules: IndustryEnergyPhotovoltaicModuleMutations
    "Mutation for entities of type 'IndustryEnergyPhotovoltaicString'."
    industryEnergyPhotovoltaicStrings: IndustryEnergyPhotovoltaicStringMutations
    "Mutation for entities of type 'IndustryEnergyPhotovoltaic'."
    industryEnergyPhotovoltaics: IndustryEnergyPhotovoltaicMutations
    "Mutation for entities of type 'IndustryFluidHeatMeter'."
    industryFluidHeatMeters: IndustryFluidHeatMeterMutations
    "Mutation for entities of type 'IndustryFluidWaterMeter'."
    industryFluidWaterMeters: IndustryFluidWaterMeterMutations
    "Mutation for entities of type 'SystemAutoIncrement'."
    systemAutoIncrements: SystemAutoIncrementMutations
    "Mutation for entities of type 'SystemBotAttributeAggregateConfiguration'."
    systemBotAttributeAggregateConfigurations: SystemBotAttributeAggregateConfigurationMutations
    "Mutation for entities of type 'SystemBotServiceHook'."
    systemBotServiceHooks: SystemBotServiceHookMutations
    "Mutation for entities of type 'SystemCommunicationDataPipelineTrigger'."
    systemCommunicationDataPipelineTriggers: SystemCommunicationDataPipelineTriggerMutations
    "Mutation for entities of type 'SystemCommunicationDataPipeline'."
    systemCommunicationDataPipelines: SystemCommunicationDataPipelineMutations
    "Mutation for entities of type 'SystemCommunicationEdgeAdapter'."
    systemCommunicationEdgeAdapters: SystemCommunicationEdgeAdapterMutations
    "Mutation for entities of type 'SystemCommunicationEdgePipeline'."
    systemCommunicationEdgePipelines: SystemCommunicationEdgePipelineMutations
    "Mutation for entities of type 'SystemCommunicationMeshAdapter'."
    systemCommunicationMeshAdapters: SystemCommunicationMeshAdapterMutations
    "Mutation for entities of type 'SystemCommunicationMeshPipeline'."
    systemCommunicationMeshPipelines: SystemCommunicationMeshPipelineMutations
    "Mutation for entities of type 'SystemCommunicationPool'."
    systemCommunicationPools: SystemCommunicationPoolMutations
    "Mutation for entities of type 'SystemConfiguration'."
    systemConfigurations: SystemConfigurationMutations
    "Mutation for entities of type 'SystemNotificationNotificationMessage'."
    systemNotificationNotificationMessages: SystemNotificationNotificationMessageMutations
    "Mutation for entities of type 'SystemNotificationNotificationTemplate'."
    systemNotificationNotificationTemplates: SystemNotificationNotificationTemplateMutations
    "Mutation for entities of type 'SystemQuery'."
    systemQuerys: SystemQueryMutations
    "Mutation for entities of type 'SystemTenant'."
    systemTenants: SystemTenantMutations
}

type RuntimeModelQuery {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicEquipment(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentConnection
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
    basicEquipmentModel(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentModelConnection
    basicNamedEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicNamedEntityConnection
    fireGuardiansRestaurant(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansRestaurantConnection
    industryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicAlarmConnection
    industryBasicEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicEventConnection
    industryBasicMachine(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicMachineConnection
    industryEnergyBattery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyBatteryConnection
    industryEnergyEnergyMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyEnergyMeterConnection
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
    industryEnergyPhotovoltaic(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicConnection
    industryEnergyPhotovoltaicModule(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicModuleConnection
    industryEnergyPhotovoltaicString(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicStringConnection
    industryFluidHeatMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidHeatMeterConnection
    industryFluidWaterMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidWaterMeterConnection
    runtimeEntities(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    systemAutoIncrement(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemAutoIncrementConnection
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
    systemBotServiceHook(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotServiceHookConnection
    systemCommunicationAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationAdapterConnection
    systemCommunicationDataPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationDataPipelineConnection
    systemCommunicationDataPipelineTrigger(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationDataPipelineTriggerConnection
    systemCommunicationDeployableEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationDeployableEntityConnection
    systemCommunicationEdgeAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationEdgeAdapterConnection
    systemCommunicationEdgePipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationEdgePipelineConnection
    systemCommunicationMeshAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshAdapterConnection
    systemCommunicationMeshPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshPipelineConnection
    systemCommunicationPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationPipelineConnection
    systemCommunicationPool(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationPoolConnection
    systemConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemConfigurationConnection
    systemEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemEntityConnection
    systemNotificationNotificationMessage(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationNotificationMessageConnection
    systemNotificationNotificationTemplate(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationNotificationTemplateConnection
    systemQuery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemQueryConnection
    systemTenant(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemTenantConnection
}

"Runtime entities of construction kit type 'System/AutoIncrement'"
type SystemAutoIncrement {
    ckTypeId: CkTypeId
    configuredBy: SystemAutoIncrement_ConfiguredByUnion
    constructionKitType: CkType
    currentValue: Int
    end: Int
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    start: Int
}

"A connection to `SystemAutoIncrement`."
type SystemAutoIncrementConnection {
    "Information to aid in pagination."
    edges: [SystemAutoIncrementEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemAutoIncrement]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemAutoIncrement`."
type SystemAutoIncrementEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemAutoIncrement
}

type SystemAutoIncrementMutations {
    "Creates new entities of type 'SystemAutoIncrement'."
    create(entities: [SystemAutoIncrementInput]!): [SystemAutoIncrement]
    "Deletes an entity of type 'SystemAutoIncrement'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemAutoIncrement'."
    update(entities: [SystemAutoIncrementInputUpdate]!): [SystemAutoIncrement]
}

type SystemAutoIncrementUpdate {
    "The corresponding item"
    item: SystemAutoIncrement
    updateState: UpdateType
}

type SystemAutoIncrementUpdateMessage {
    "The corresponding items"
    items: [SystemAutoIncrementUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemAutoIncrement"
type SystemAutoIncrement_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Bot/AttributeAggregateConfiguration'"
type SystemBotAttributeAggregateConfiguration {
    autoCompleteFilter: String
    autoCompleteLimit: Int
    ckTypeId: CkTypeId
    configuredBy: SystemBotAttributeAggregateConfiguration_ConfiguredByUnion
    configures: SystemBotAttributeAggregateConfiguration_ConfiguresUnion
    constructionKitType: CkType
    isAutoCompleteEnabled: Boolean
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `SystemBotAttributeAggregateConfiguration`."
type SystemBotAttributeAggregateConfigurationConnection {
    "Information to aid in pagination."
    edges: [SystemBotAttributeAggregateConfigurationEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemBotAttributeAggregateConfiguration]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemBotAttributeAggregateConfiguration`."
type SystemBotAttributeAggregateConfigurationEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemBotAttributeAggregateConfiguration
}

type SystemBotAttributeAggregateConfigurationMutations {
    "Creates new entities of type 'SystemBotAttributeAggregateConfiguration'."
    create(entities: [SystemBotAttributeAggregateConfigurationInput]!): [SystemBotAttributeAggregateConfiguration]
    "Deletes an entity of type 'SystemBotAttributeAggregateConfiguration'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemBotAttributeAggregateConfiguration'."
    update(entities: [SystemBotAttributeAggregateConfigurationInputUpdate]!): [SystemBotAttributeAggregateConfiguration]
}

type SystemBotAttributeAggregateConfigurationUpdate {
    "The corresponding item"
    item: SystemBotAttributeAggregateConfiguration
    updateState: UpdateType
}

type SystemBotAttributeAggregateConfigurationUpdateMessage {
    "The corresponding items"
    items: [SystemBotAttributeAggregateConfigurationUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemBotAttributeAggregateConfiguration"
type SystemBotAttributeAggregateConfiguration_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System.Bot/Configures (Outbound) of entity type SystemBotAttributeAggregateConfiguration"
type SystemBotAttributeAggregateConfiguration_ConfiguresUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicEquipment(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentConnection
    basicEquipmentGroup(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentGroupConnection
    basicEquipmentModel(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicEquipmentModelConnection
    basicNamedEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicNamedEntityConnection
    fireGuardiansRestaurant(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansRestaurantConnection
    industryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicAlarmConnection
    industryBasicEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicEventConnection
    industryBasicMachine(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryBasicMachineConnection
    industryEnergyBattery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyBatteryConnection
    industryEnergyEnergyMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyEnergyMeterConnection
    industryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyInverterConnection
    industryEnergyPhotovoltaic(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicConnection
    industryEnergyPhotovoltaicModule(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicModuleConnection
    industryEnergyPhotovoltaicString(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryEnergyPhotovoltaicStringConnection
    industryFluidHeatMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidHeatMeterConnection
    industryFluidWaterMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): IndustryFluidWaterMeterConnection
    systemAutoIncrement(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemAutoIncrementConnection
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
    systemBotServiceHook(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotServiceHookConnection
    systemCommunicationAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationAdapterConnection
    systemCommunicationDataPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationDataPipelineConnection
    systemCommunicationDataPipelineTrigger(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationDataPipelineTriggerConnection
    systemCommunicationDeployableEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationDeployableEntityConnection
    systemCommunicationEdgeAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationEdgeAdapterConnection
    systemCommunicationEdgePipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationEdgePipelineConnection
    systemCommunicationMeshAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshAdapterConnection
    systemCommunicationMeshPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshPipelineConnection
    systemCommunicationPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationPipelineConnection
    systemCommunicationPool(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationPoolConnection
    systemConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemConfigurationConnection
    systemEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemEntityConnection
    systemNotificationNotificationMessage(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationNotificationMessageConnection
    systemNotificationNotificationTemplate(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationNotificationTemplateConnection
    systemQuery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemQueryConnection
    systemTenant(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemTenantConnection
}

"Runtime entities of construction kit type 'System.Bot/ServiceHook'"
type SystemBotServiceHook {
    ckTypeId: CkTypeId
    configuredBy: SystemBotServiceHook_ConfiguredByUnion
    constructionKitType: CkType
    enabled: Boolean
    fieldFilter: String
    name: String
    queryCkTypeId: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    serviceHookAction: String
    serviceHookApiKey: String
    serviceHookBaseUri: String
}

"A connection to `SystemBotServiceHook`."
type SystemBotServiceHookConnection {
    "Information to aid in pagination."
    edges: [SystemBotServiceHookEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemBotServiceHook]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemBotServiceHook`."
type SystemBotServiceHookEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemBotServiceHook
}

type SystemBotServiceHookMutations {
    "Creates new entities of type 'SystemBotServiceHook'."
    create(entities: [SystemBotServiceHookInput]!): [SystemBotServiceHook]
    "Deletes an entity of type 'SystemBotServiceHook'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemBotServiceHook'."
    update(entities: [SystemBotServiceHookInputUpdate]!): [SystemBotServiceHook]
}

type SystemBotServiceHookUpdate {
    "The corresponding item"
    item: SystemBotServiceHook
    updateState: UpdateType
}

type SystemBotServiceHookUpdateMessage {
    "The corresponding items"
    items: [SystemBotServiceHookUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemBotServiceHook"
type SystemBotServiceHook_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Communication/Adapter'"
type SystemCommunicationAdapter {
    ckTypeId: CkTypeId
    communicationState: SystemCommunicationCommunicationState
    configuration: String
    configurationState: SystemCommunicationConfigurationState
    configuredBy: SystemCommunicationAdapter_ConfiguredByUnion
    constructionKitType: CkType
    deploymentState: SystemCommunicationDeploymentState
    description: String
    executes: SystemCommunicationAdapter_ExecutesUnion
    imageName: String
    imageVersion: String
    lastSeen: DateTime
    name: String
    parent: SystemCommunicationAdapter_ParentUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    type: String
}

"A connection to `SystemCommunicationAdapter`."
type SystemCommunicationAdapterConnection {
    "Information to aid in pagination."
    edges: [SystemCommunicationAdapterEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemCommunicationAdapter]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemCommunicationAdapter`."
type SystemCommunicationAdapterEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemCommunicationAdapter
}

type SystemCommunicationAdapterUpdate {
    "The corresponding item"
    item: SystemCommunicationAdapter
    updateState: UpdateType
}

type SystemCommunicationAdapterUpdateMessage {
    "The corresponding items"
    items: [SystemCommunicationAdapterUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemCommunicationAdapter"
type SystemCommunicationAdapter_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System.Communication/Executes (Inbound) of entity type SystemCommunicationAdapter"
type SystemCommunicationAdapter_ExecutesUnion {
    systemCommunicationEdgePipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationEdgePipelineConnection
    systemCommunicationMeshPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshPipelineConnection
    systemCommunicationPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationPipelineConnection
}

"Association System/ParentChild (Outbound) of entity type SystemCommunicationAdapter"
type SystemCommunicationAdapter_ParentUnion {
    systemCommunicationPool(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationPoolConnection
}

"Runtime entities of construction kit type 'System.Communication/DataPipeline'"
type SystemCommunicationDataPipeline {
    children: SystemCommunicationDataPipeline_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: SystemCommunicationDataPipeline_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `SystemCommunicationDataPipeline`."
type SystemCommunicationDataPipelineConnection {
    "Information to aid in pagination."
    edges: [SystemCommunicationDataPipelineEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemCommunicationDataPipeline]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemCommunicationDataPipeline`."
type SystemCommunicationDataPipelineEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemCommunicationDataPipeline
}

type SystemCommunicationDataPipelineMutations {
    "Creates new entities of type 'SystemCommunicationDataPipeline'."
    create(entities: [SystemCommunicationDataPipelineInput]!): [SystemCommunicationDataPipeline]
    "Deletes an entity of type 'SystemCommunicationDataPipeline'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemCommunicationDataPipeline'."
    update(entities: [SystemCommunicationDataPipelineInputUpdate]!): [SystemCommunicationDataPipeline]
}

"Runtime entities of construction kit type 'System.Communication/DataPipelineTrigger'"
type SystemCommunicationDataPipelineTrigger {
    ckTypeId: CkTypeId
    configuredBy: SystemCommunicationDataPipelineTrigger_ConfiguredByUnion
    constructionKitType: CkType
    cronExpression: String
    deploymentState: SystemCommunicationDeploymentState
    description: String
    enabled: Boolean
    lastSeen: DateTime
    name: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    triggers: SystemCommunicationDataPipelineTrigger_TriggersUnion
}

"A connection to `SystemCommunicationDataPipelineTrigger`."
type SystemCommunicationDataPipelineTriggerConnection {
    "Information to aid in pagination."
    edges: [SystemCommunicationDataPipelineTriggerEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemCommunicationDataPipelineTrigger]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemCommunicationDataPipelineTrigger`."
type SystemCommunicationDataPipelineTriggerEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemCommunicationDataPipelineTrigger
}

type SystemCommunicationDataPipelineTriggerMutations {
    "Creates new entities of type 'SystemCommunicationDataPipelineTrigger'."
    create(entities: [SystemCommunicationDataPipelineTriggerInput]!): [SystemCommunicationDataPipelineTrigger]
    "Deletes an entity of type 'SystemCommunicationDataPipelineTrigger'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemCommunicationDataPipelineTrigger'."
    update(entities: [SystemCommunicationDataPipelineTriggerInputUpdate]!): [SystemCommunicationDataPipelineTrigger]
}

type SystemCommunicationDataPipelineTriggerUpdate {
    "The corresponding item"
    item: SystemCommunicationDataPipelineTrigger
    updateState: UpdateType
}

type SystemCommunicationDataPipelineTriggerUpdateMessage {
    "The corresponding items"
    items: [SystemCommunicationDataPipelineTriggerUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemCommunicationDataPipelineTrigger"
type SystemCommunicationDataPipelineTrigger_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System.Communication/Triggers (Inbound) of entity type SystemCommunicationDataPipelineTrigger"
type SystemCommunicationDataPipelineTrigger_TriggersUnion {
    systemCommunicationMeshPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshPipelineConnection
}

type SystemCommunicationDataPipelineUpdate {
    "The corresponding item"
    item: SystemCommunicationDataPipeline
    updateState: UpdateType
}

type SystemCommunicationDataPipelineUpdateMessage {
    "The corresponding items"
    items: [SystemCommunicationDataPipelineUpdate]
}

"Association System/ParentChild (Inbound) of entity type SystemCommunicationDataPipeline"
type SystemCommunicationDataPipeline_ChildrenUnion {
    systemCommunicationEdgePipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationEdgePipelineConnection
    systemCommunicationMeshPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshPipelineConnection
    systemCommunicationPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationPipelineConnection
}

"Association System.Bot/Configures (Inbound) of entity type SystemCommunicationDataPipeline"
type SystemCommunicationDataPipeline_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Communication/DeployableEntity'"
type SystemCommunicationDeployableEntity {
    ckTypeId: CkTypeId
    configuredBy: SystemCommunicationDeployableEntity_ConfiguredByUnion
    constructionKitType: CkType
    deploymentState: SystemCommunicationDeploymentState
    description: String
    lastSeen: DateTime
    name: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `SystemCommunicationDeployableEntity`."
type SystemCommunicationDeployableEntityConnection {
    "Information to aid in pagination."
    edges: [SystemCommunicationDeployableEntityEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemCommunicationDeployableEntity]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemCommunicationDeployableEntity`."
type SystemCommunicationDeployableEntityEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemCommunicationDeployableEntity
}

type SystemCommunicationDeployableEntityUpdate {
    "The corresponding item"
    item: SystemCommunicationDeployableEntity
    updateState: UpdateType
}

type SystemCommunicationDeployableEntityUpdateMessage {
    "The corresponding items"
    items: [SystemCommunicationDeployableEntityUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemCommunicationDeployableEntity"
type SystemCommunicationDeployableEntity_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Communication/EdgeAdapter'"
type SystemCommunicationEdgeAdapter {
    ckTypeId: CkTypeId
    communicationState: SystemCommunicationCommunicationState
    configuration: String
    configurationState: SystemCommunicationConfigurationState
    configuredBy: SystemCommunicationEdgeAdapter_ConfiguredByUnion
    constructionKitType: CkType
    deploymentState: SystemCommunicationDeploymentState
    description: String
    executes: SystemCommunicationEdgeAdapter_ExecutesUnion
    imageName: String
    imageVersion: String
    lastSeen: DateTime
    name: String
    parent: SystemCommunicationEdgeAdapter_ParentUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    type: String
}

"A connection to `SystemCommunicationEdgeAdapter`."
type SystemCommunicationEdgeAdapterConnection {
    "Information to aid in pagination."
    edges: [SystemCommunicationEdgeAdapterEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemCommunicationEdgeAdapter]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemCommunicationEdgeAdapter`."
type SystemCommunicationEdgeAdapterEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemCommunicationEdgeAdapter
}

type SystemCommunicationEdgeAdapterMutations {
    "Creates new entities of type 'SystemCommunicationEdgeAdapter'."
    create(entities: [SystemCommunicationEdgeAdapterInput]!): [SystemCommunicationEdgeAdapter]
    "Deletes an entity of type 'SystemCommunicationEdgeAdapter'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemCommunicationEdgeAdapter'."
    update(entities: [SystemCommunicationEdgeAdapterInputUpdate]!): [SystemCommunicationEdgeAdapter]
}

type SystemCommunicationEdgeAdapterUpdate {
    "The corresponding item"
    item: SystemCommunicationEdgeAdapter
    updateState: UpdateType
}

type SystemCommunicationEdgeAdapterUpdateMessage {
    "The corresponding items"
    items: [SystemCommunicationEdgeAdapterUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemCommunicationEdgeAdapter"
type SystemCommunicationEdgeAdapter_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System.Communication/Executes (Inbound) of entity type SystemCommunicationEdgeAdapter"
type SystemCommunicationEdgeAdapter_ExecutesUnion {
    systemCommunicationEdgePipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationEdgePipelineConnection
    systemCommunicationMeshPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshPipelineConnection
    systemCommunicationPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationPipelineConnection
}

"Association System/ParentChild (Outbound) of entity type SystemCommunicationEdgeAdapter"
type SystemCommunicationEdgeAdapter_ParentUnion {
    systemCommunicationPool(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationPoolConnection
}

"Runtime entities of construction kit type 'System.Communication/EdgePipeline'"
type SystemCommunicationEdgePipeline {
    ckTypeId: CkTypeId
    configuredBy: SystemCommunicationEdgePipeline_ConfiguredByUnion
    constructionKitType: CkType
    deploymentState: SystemCommunicationDeploymentState
    description: String
    executedBy: SystemCommunicationEdgePipeline_ExecutedByUnion
    lastSeen: DateTime
    name: String
    parent: SystemCommunicationEdgePipeline_ParentUnion
    pipelineDefinition: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `SystemCommunicationEdgePipeline`."
type SystemCommunicationEdgePipelineConnection {
    "Information to aid in pagination."
    edges: [SystemCommunicationEdgePipelineEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemCommunicationEdgePipeline]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemCommunicationEdgePipeline`."
type SystemCommunicationEdgePipelineEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemCommunicationEdgePipeline
}

type SystemCommunicationEdgePipelineMutations {
    "Creates new entities of type 'SystemCommunicationEdgePipeline'."
    create(entities: [SystemCommunicationEdgePipelineInput]!): [SystemCommunicationEdgePipeline]
    "Deletes an entity of type 'SystemCommunicationEdgePipeline'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemCommunicationEdgePipeline'."
    update(entities: [SystemCommunicationEdgePipelineInputUpdate]!): [SystemCommunicationEdgePipeline]
}

type SystemCommunicationEdgePipelineUpdate {
    "The corresponding item"
    item: SystemCommunicationEdgePipeline
    updateState: UpdateType
}

type SystemCommunicationEdgePipelineUpdateMessage {
    "The corresponding items"
    items: [SystemCommunicationEdgePipelineUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemCommunicationEdgePipeline"
type SystemCommunicationEdgePipeline_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System.Communication/Executes (Outbound) of entity type SystemCommunicationEdgePipeline"
type SystemCommunicationEdgePipeline_ExecutedByUnion {
    systemCommunicationAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationAdapterConnection
    systemCommunicationEdgeAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationEdgeAdapterConnection
    systemCommunicationMeshAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshAdapterConnection
}

"Association System/ParentChild (Outbound) of entity type SystemCommunicationEdgePipeline"
type SystemCommunicationEdgePipeline_ParentUnion {
    systemCommunicationDataPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationDataPipelineConnection
}

"Runtime entities of construction kit type 'System.Communication/MeshAdapter'"
type SystemCommunicationMeshAdapter {
    ckTypeId: CkTypeId
    communicationState: SystemCommunicationCommunicationState
    configuration: String
    configurationState: SystemCommunicationConfigurationState
    configuredBy: SystemCommunicationMeshAdapter_ConfiguredByUnion
    constructionKitType: CkType
    deploymentState: SystemCommunicationDeploymentState
    description: String
    executes: SystemCommunicationMeshAdapter_ExecutesUnion
    imageName: String
    imageVersion: String
    lastSeen: DateTime
    name: String
    parent: SystemCommunicationMeshAdapter_ParentUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    type: String
}

"A connection to `SystemCommunicationMeshAdapter`."
type SystemCommunicationMeshAdapterConnection {
    "Information to aid in pagination."
    edges: [SystemCommunicationMeshAdapterEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemCommunicationMeshAdapter]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemCommunicationMeshAdapter`."
type SystemCommunicationMeshAdapterEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemCommunicationMeshAdapter
}

type SystemCommunicationMeshAdapterMutations {
    "Creates new entities of type 'SystemCommunicationMeshAdapter'."
    create(entities: [SystemCommunicationMeshAdapterInput]!): [SystemCommunicationMeshAdapter]
    "Deletes an entity of type 'SystemCommunicationMeshAdapter'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemCommunicationMeshAdapter'."
    update(entities: [SystemCommunicationMeshAdapterInputUpdate]!): [SystemCommunicationMeshAdapter]
}

type SystemCommunicationMeshAdapterUpdate {
    "The corresponding item"
    item: SystemCommunicationMeshAdapter
    updateState: UpdateType
}

type SystemCommunicationMeshAdapterUpdateMessage {
    "The corresponding items"
    items: [SystemCommunicationMeshAdapterUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemCommunicationMeshAdapter"
type SystemCommunicationMeshAdapter_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System.Communication/Executes (Inbound) of entity type SystemCommunicationMeshAdapter"
type SystemCommunicationMeshAdapter_ExecutesUnion {
    systemCommunicationEdgePipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationEdgePipelineConnection
    systemCommunicationMeshPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshPipelineConnection
    systemCommunicationPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationPipelineConnection
}

"Association System/ParentChild (Outbound) of entity type SystemCommunicationMeshAdapter"
type SystemCommunicationMeshAdapter_ParentUnion {
    systemCommunicationPool(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationPoolConnection
}

"Runtime entities of construction kit type 'System.Communication/MeshPipeline'"
type SystemCommunicationMeshPipeline {
    ckTypeId: CkTypeId
    configuredBy: SystemCommunicationMeshPipeline_ConfiguredByUnion
    constructionKitType: CkType
    deploymentState: SystemCommunicationDeploymentState
    description: String
    executedBy: SystemCommunicationMeshPipeline_ExecutedByUnion
    lastSeen: DateTime
    name: String
    parent: SystemCommunicationMeshPipeline_ParentUnion
    pipelineDefinition: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    triggeredBy: SystemCommunicationMeshPipeline_TriggeredByUnion
}

"A connection to `SystemCommunicationMeshPipeline`."
type SystemCommunicationMeshPipelineConnection {
    "Information to aid in pagination."
    edges: [SystemCommunicationMeshPipelineEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemCommunicationMeshPipeline]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemCommunicationMeshPipeline`."
type SystemCommunicationMeshPipelineEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemCommunicationMeshPipeline
}

type SystemCommunicationMeshPipelineMutations {
    "Creates new entities of type 'SystemCommunicationMeshPipeline'."
    create(entities: [SystemCommunicationMeshPipelineInput]!): [SystemCommunicationMeshPipeline]
    "Deletes an entity of type 'SystemCommunicationMeshPipeline'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemCommunicationMeshPipeline'."
    update(entities: [SystemCommunicationMeshPipelineInputUpdate]!): [SystemCommunicationMeshPipeline]
}

type SystemCommunicationMeshPipelineUpdate {
    "The corresponding item"
    item: SystemCommunicationMeshPipeline
    updateState: UpdateType
}

type SystemCommunicationMeshPipelineUpdateMessage {
    "The corresponding items"
    items: [SystemCommunicationMeshPipelineUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemCommunicationMeshPipeline"
type SystemCommunicationMeshPipeline_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System.Communication/Executes (Outbound) of entity type SystemCommunicationMeshPipeline"
type SystemCommunicationMeshPipeline_ExecutedByUnion {
    systemCommunicationAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationAdapterConnection
    systemCommunicationEdgeAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationEdgeAdapterConnection
    systemCommunicationMeshAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshAdapterConnection
}

"Association System/ParentChild (Outbound) of entity type SystemCommunicationMeshPipeline"
type SystemCommunicationMeshPipeline_ParentUnion {
    systemCommunicationDataPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationDataPipelineConnection
}

"Association System.Communication/Triggers (Outbound) of entity type SystemCommunicationMeshPipeline"
type SystemCommunicationMeshPipeline_TriggeredByUnion {
    systemCommunicationDataPipelineTrigger(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationDataPipelineTriggerConnection
}

"Runtime entities of construction kit type 'System.Communication/Pipeline'"
type SystemCommunicationPipeline {
    ckTypeId: CkTypeId
    configuredBy: SystemCommunicationPipeline_ConfiguredByUnion
    constructionKitType: CkType
    deploymentState: SystemCommunicationDeploymentState
    description: String
    executedBy: SystemCommunicationPipeline_ExecutedByUnion
    lastSeen: DateTime
    name: String
    parent: SystemCommunicationPipeline_ParentUnion
    pipelineDefinition: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `SystemCommunicationPipeline`."
type SystemCommunicationPipelineConnection {
    "Information to aid in pagination."
    edges: [SystemCommunicationPipelineEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemCommunicationPipeline]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemCommunicationPipeline`."
type SystemCommunicationPipelineEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemCommunicationPipeline
}

type SystemCommunicationPipelineUpdate {
    "The corresponding item"
    item: SystemCommunicationPipeline
    updateState: UpdateType
}

type SystemCommunicationPipelineUpdateMessage {
    "The corresponding items"
    items: [SystemCommunicationPipelineUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemCommunicationPipeline"
type SystemCommunicationPipeline_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System.Communication/Executes (Outbound) of entity type SystemCommunicationPipeline"
type SystemCommunicationPipeline_ExecutedByUnion {
    systemCommunicationAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationAdapterConnection
    systemCommunicationEdgeAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationEdgeAdapterConnection
    systemCommunicationMeshAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshAdapterConnection
}

"Association System/ParentChild (Outbound) of entity type SystemCommunicationPipeline"
type SystemCommunicationPipeline_ParentUnion {
    systemCommunicationDataPipeline(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationDataPipelineConnection
}

"Runtime entities of construction kit type 'System.Communication/Pool'"
type SystemCommunicationPool {
    children: SystemCommunicationPool_ChildrenUnion
    ckTypeId: CkTypeId
    communicationState: SystemCommunicationCommunicationState
    configurationState: SystemCommunicationConfigurationState
    configuredBy: SystemCommunicationPool_ConfiguredByUnion
    constructionKitType: CkType
    deploymentState: SystemCommunicationDeploymentState
    description: String
    lastSeen: DateTime
    name: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `SystemCommunicationPool`."
type SystemCommunicationPoolConnection {
    "Information to aid in pagination."
    edges: [SystemCommunicationPoolEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemCommunicationPool]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemCommunicationPool`."
type SystemCommunicationPoolEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemCommunicationPool
}

type SystemCommunicationPoolMutations {
    "Creates new entities of type 'SystemCommunicationPool'."
    create(entities: [SystemCommunicationPoolInput]!): [SystemCommunicationPool]
    "Deletes an entity of type 'SystemCommunicationPool'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemCommunicationPool'."
    update(entities: [SystemCommunicationPoolInputUpdate]!): [SystemCommunicationPool]
}

type SystemCommunicationPoolUpdate {
    "The corresponding item"
    item: SystemCommunicationPool
    updateState: UpdateType
}

type SystemCommunicationPoolUpdateMessage {
    "The corresponding items"
    items: [SystemCommunicationPoolUpdate]
}

"Association System/ParentChild (Inbound) of entity type SystemCommunicationPool"
type SystemCommunicationPool_ChildrenUnion {
    systemCommunicationAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationAdapterConnection
    systemCommunicationEdgeAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationEdgeAdapterConnection
    systemCommunicationMeshAdapter(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemCommunicationMeshAdapterConnection
}

"Association System.Bot/Configures (Inbound) of entity type SystemCommunicationPool"
type SystemCommunicationPool_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System/Configuration'"
type SystemConfiguration {
    ckTypeId: CkTypeId
    configurationValue: String
    configuredBy: SystemConfiguration_ConfiguredByUnion
    constructionKitType: CkType
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `SystemConfiguration`."
type SystemConfigurationConnection {
    "Information to aid in pagination."
    edges: [SystemConfigurationEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemConfiguration]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemConfiguration`."
type SystemConfigurationEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemConfiguration
}

type SystemConfigurationMutations {
    "Creates new entities of type 'SystemConfiguration'."
    create(entities: [SystemConfigurationInput]!): [SystemConfiguration]
    "Deletes an entity of type 'SystemConfiguration'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemConfiguration'."
    update(entities: [SystemConfigurationInputUpdate]!): [SystemConfiguration]
}

type SystemConfigurationUpdate {
    "The corresponding item"
    item: SystemConfiguration
    updateState: UpdateType
}

type SystemConfigurationUpdateMessage {
    "The corresponding items"
    items: [SystemConfigurationUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemConfiguration"
type SystemConfiguration_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System/Entity'"
type SystemEntity {
    ckTypeId: CkTypeId
    configuredBy: SystemEntity_ConfiguredByUnion
    constructionKitType: CkType
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
}

"A connection to `SystemEntity`."
type SystemEntityConnection {
    "Information to aid in pagination."
    edges: [SystemEntityEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemEntity]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemEntity`."
type SystemEntityEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemEntity
}

type SystemEntityUpdate {
    "The corresponding item"
    item: SystemEntity
    updateState: UpdateType
}

type SystemEntityUpdateMessage {
    "The corresponding items"
    items: [SystemEntityUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemEntity"
type SystemEntity_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Notification/NotificationMessage'"
type SystemNotificationNotificationMessage {
    bodyText: String
    ckTypeId: CkTypeId
    configuredBy: SystemNotificationNotificationMessage_ConfiguredByUnion
    constructionKitType: CkType
    errorText: String
    lastTryDateTime: DateTime
    notificationType: SystemNotificationNotificationTypes
    recipientAddress: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    sendStatus: SystemNotificationNotificationStates
    sentDateTime: DateTime
    subjectText: String
}

"A connection to `SystemNotificationNotificationMessage`."
type SystemNotificationNotificationMessageConnection {
    "Information to aid in pagination."
    edges: [SystemNotificationNotificationMessageEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemNotificationNotificationMessage]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemNotificationNotificationMessage`."
type SystemNotificationNotificationMessageEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemNotificationNotificationMessage
}

type SystemNotificationNotificationMessageMutations {
    "Creates new entities of type 'SystemNotificationNotificationMessage'."
    create(entities: [SystemNotificationNotificationMessageInput]!): [SystemNotificationNotificationMessage]
    "Deletes an entity of type 'SystemNotificationNotificationMessage'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemNotificationNotificationMessage'."
    update(entities: [SystemNotificationNotificationMessageInputUpdate]!): [SystemNotificationNotificationMessage]
}

type SystemNotificationNotificationMessageUpdate {
    "The corresponding item"
    item: SystemNotificationNotificationMessage
    updateState: UpdateType
}

type SystemNotificationNotificationMessageUpdateMessage {
    "The corresponding items"
    items: [SystemNotificationNotificationMessageUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemNotificationNotificationMessage"
type SystemNotificationNotificationMessage_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Notification/NotificationTemplate'"
type SystemNotificationNotificationTemplate {
    bodyTemplate: String
    ckTypeId: CkTypeId
    configuredBy: SystemNotificationNotificationTemplate_ConfiguredByUnion
    constructionKitType: CkType
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    subjectTemplate: String
    type: SystemNotificationNotificationTypes
}

"A connection to `SystemNotificationNotificationTemplate`."
type SystemNotificationNotificationTemplateConnection {
    "Information to aid in pagination."
    edges: [SystemNotificationNotificationTemplateEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemNotificationNotificationTemplate]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemNotificationNotificationTemplate`."
type SystemNotificationNotificationTemplateEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemNotificationNotificationTemplate
}

type SystemNotificationNotificationTemplateMutations {
    "Creates new entities of type 'SystemNotificationNotificationTemplate'."
    create(entities: [SystemNotificationNotificationTemplateInput]!): [SystemNotificationNotificationTemplate]
    "Deletes an entity of type 'SystemNotificationNotificationTemplate'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemNotificationNotificationTemplate'."
    update(entities: [SystemNotificationNotificationTemplateInputUpdate]!): [SystemNotificationNotificationTemplate]
}

type SystemNotificationNotificationTemplateUpdate {
    "The corresponding item"
    item: SystemNotificationNotificationTemplate
    updateState: UpdateType
}

type SystemNotificationNotificationTemplateUpdateMessage {
    "The corresponding items"
    items: [SystemNotificationNotificationTemplateUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemNotificationNotificationTemplate"
type SystemNotificationNotificationTemplate_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System/Query'"
type SystemQuery {
    attributeSearchFilter: String
    ckTypeId: CkTypeId
    columns: String
    configuredBy: SystemQuery_ConfiguredByUnion
    constructionKitType: CkType
    fieldFilter: String
    name: String
    queryCkTypeId: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    sorting: String
    textSearchFilter: String
}

"A connection to `SystemQuery`."
type SystemQueryConnection {
    "Information to aid in pagination."
    edges: [SystemQueryEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemQuery]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemQuery`."
type SystemQueryEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemQuery
}

type SystemQueryMutations {
    "Creates new entities of type 'SystemQuery'."
    create(entities: [SystemQueryInput]!): [SystemQuery]
    "Deletes an entity of type 'SystemQuery'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemQuery'."
    update(entities: [SystemQueryInputUpdate]!): [SystemQuery]
}

type SystemQueryUpdate {
    "The corresponding item"
    item: SystemQuery
    updateState: UpdateType
}

type SystemQueryUpdateMessage {
    "The corresponding items"
    items: [SystemQueryUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemQuery"
type SystemQuery_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System/Tenant'"
type SystemTenant {
    ckTypeId: CkTypeId
    configuredBy: SystemTenant_ConfiguredByUnion
    constructionKitType: CkType
    databaseName: String
    parentTenantId: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtWellKnownName: String
    tenantId: String
}

"A connection to `SystemTenant`."
type SystemTenantConnection {
    "Information to aid in pagination."
    edges: [SystemTenantEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemTenant]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemTenant`."
type SystemTenantEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemTenant
}

type SystemTenantMutations {
    "Creates new entities of type 'SystemTenant'."
    create(entities: [SystemTenantInput]!): [SystemTenant]
    "Deletes an entity of type 'SystemTenant'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemTenant'."
    update(entities: [SystemTenantInputUpdate]!): [SystemTenant]
}

type SystemTenantUpdate {
    "The corresponding item"
    item: SystemTenant
    updateState: UpdateType
}

type SystemTenantUpdateMessage {
    "The corresponding items"
    items: [SystemTenantUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemTenant"
type SystemTenant_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

type TimeseriesModelQuery {
    tsIndustryBasicAlarm(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Sort order for items"
        sortOrder: [Sort],
        "Filter for time series data."
        timeSeriesFilter: TimeFilter
    ): tsIndustryBasicAlarmConnection
    tsIndustryEnergyBattery(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Sort order for items"
        sortOrder: [Sort],
        "Filter for time series data."
        timeSeriesFilter: TimeFilter
    ): tsIndustryEnergyBatteryConnection
    tsIndustryEnergyEnergyMeter(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Sort order for items"
        sortOrder: [Sort],
        "Filter for time series data."
        timeSeriesFilter: TimeFilter
    ): tsIndustryEnergyEnergyMeterConnection
    tsIndustryEnergyInverter(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Sort order for items"
        sortOrder: [Sort],
        "Filter for time series data."
        timeSeriesFilter: TimeFilter
    ): tsIndustryEnergyInverterConnection
}

"Grouping of items result"
type grouping {
    "The average value of the given attribute names."
    avgStatistics: [statistics]
    "The count of entities in the group."
    count: Int!
    "The count of value of the given attribute names that are not null."
    countStatistics: [statistics]
    "A list of attributes the items are grouped by."
    groupByAttributeNames: [String]!
    "The key value of the group."
    keys: [SimpleScalarType]!
    "The maximum value of the given attribute names."
    maxStatistics: [statistics]
    "The minimum value of the given attribute names."
    minStatistics: [statistics]
}

"Statistics of items result"
type statistics {
    "Attribute name of the statistic"
    attributeName: String
    "Statistic value"
    value: SimpleScalarType
}

"Time series entities of construction kit type 'Industry.Basic/Alarm'"
type tsIndustryBasicAlarm {
    cause(
        "Arguments for time series data."
        timeSeriesAttributeArguments: AttributeArgument
    ): String
    ckTypeId: CkTypeId!
    constructionKitType: CkType
    rtId: OctoObjectId!
    timeStamp: DateTime
}

"A connection to `tsIndustryBasicAlarm`."
type tsIndustryBasicAlarmConnection {
    "Information to aid in pagination."
    edges: [tsIndustryBasicAlarmEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [tsIndustryBasicAlarm]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `tsIndustryBasicAlarm`."
type tsIndustryBasicAlarmEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: tsIndustryBasicAlarm
}

"Time series entities of construction kit type 'Industry.Energy/Battery'"
type tsIndustryEnergyBattery {
    ampere(
        "Arguments for time series data."
        timeSeriesAttributeArguments: AttributeArgument
    ): Decimal
    ckTypeId: CkTypeId!
    constructionKitType: CkType
    rtId: OctoObjectId!
    timeStamp: DateTime
    voltage(
        "Arguments for time series data."
        timeSeriesAttributeArguments: AttributeArgument
    ): Decimal
}

"A connection to `tsIndustryEnergyBattery`."
type tsIndustryEnergyBatteryConnection {
    "Information to aid in pagination."
    edges: [tsIndustryEnergyBatteryEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [tsIndustryEnergyBattery]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `tsIndustryEnergyBattery`."
type tsIndustryEnergyBatteryEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: tsIndustryEnergyBattery
}

"Time series entities of construction kit type 'Industry.Energy/EnergyMeter'"
type tsIndustryEnergyEnergyMeter {
    ampere(
        "Arguments for time series data."
        timeSeriesAttributeArguments: AttributeArgument
    ): Decimal
    ckTypeId: CkTypeId!
    constructionKitType: CkType
    rtId: OctoObjectId!
    timeStamp: DateTime
    voltage(
        "Arguments for time series data."
        timeSeriesAttributeArguments: AttributeArgument
    ): Decimal
}

"A connection to `tsIndustryEnergyEnergyMeter`."
type tsIndustryEnergyEnergyMeterConnection {
    "Information to aid in pagination."
    edges: [tsIndustryEnergyEnergyMeterEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [tsIndustryEnergyEnergyMeter]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `tsIndustryEnergyEnergyMeter`."
type tsIndustryEnergyEnergyMeterEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: tsIndustryEnergyEnergyMeter
}

"Time series entities of construction kit type 'Industry.Energy/Inverter'"
type tsIndustryEnergyInverter {
    ampere(
        "Arguments for time series data."
        timeSeriesAttributeArguments: AttributeArgument
    ): Decimal
    ckTypeId: CkTypeId!
    constructionKitType: CkType
    dCAmpere(
        "Arguments for time series data."
        timeSeriesAttributeArguments: AttributeArgument
    ): Decimal
    dCVoltage(
        "Arguments for time series data."
        timeSeriesAttributeArguments: AttributeArgument
    ): Decimal
    rtId: OctoObjectId!
    timeStamp: DateTime
    voltage(
        "Arguments for time series data."
        timeSeriesAttributeArguments: AttributeArgument
    ): Decimal
}

"A connection to `tsIndustryEnergyInverter`."
type tsIndustryEnergyInverterConnection {
    "Information to aid in pagination."
    edges: [tsIndustryEnergyInverterEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [tsIndustryEnergyInverter]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `tsIndustryEnergyInverter`."
type tsIndustryEnergyInverterEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: tsIndustryEnergyInverter
}

"Defines the aggregation type"
enum AggregationType {
    AVG
    MAX
    MIN
}

"Defines the type of modification during write operations"
enum AssociationModOptions {
    CREATE
    DELETE
}

"Enum of valid attribute types"
enum AttributeValueType {
    BINARY
    BINARY_LINKED
    BOOLEAN
    DATE_TIME
    DATE_TIME_OFFSET
    DOUBLE
    ENUM
    GEOSPATIAL_POINT
    INT
    INT_64
    INT_ARRAY
    RECORD
    RECORD_ARRAY
    STRING
    STRING_ARRAY
    TIME_SPAN
}

"Runtime entities of construction kit enum 'Basic/TypeOfTelephoneBasic'"
enum BasicTypeOfTelephoneBasic {
    HOME
    OFFICE
    SECRETARY
    SUBSTITUTE
}

"Runtime entities of construction kit enum 'Basic/TypeOfTelephoneEnhanced'"
enum BasicTypeOfTelephoneEnhanced {
    HOME
    OFFICE
    OFFICE_MOBILE
    PRIVATE_MOBILE
    SECRETARY
    SUBSTITUTE
}

"Defines the operator of field compare"
enum FieldFilterOperators {
    ANY_EQ
    EQUALS
    GREATER_EQUAL_THAN
    GREATER_THAN
    IN
    LESS_EQUAL_THAN
    LESS_THAN
    LIKE
    MATCH_REG_EX
    NOT_EQUALS
    NOT_IN
}

"Runtime entities of construction kit enum 'Industry.Basic/EventAlarmSource'"
enum IndustryBasicEventAlarmSource {
    CONTROL_SYSTEM
    FIELD_DEVICE
    HMI
    INTERNAL
}

"Runtime entities of construction kit enum 'Industry.Basic/EventAlarmState'"
enum IndustryBasicEventAlarmState {
    "The acknowledged alarm state should not use an audible indication. The acknowledged alarm state visual indication should be clearly distinguishable from the normal state indication by using symbols (e.g., shape or text), and should be identical in colour to the unacknowledged alarm indication. A blinking element should not be used in the visual indication for an acknowledged alarm."
    ACKNOWLEDGED
    "The normal state should not use an audible indication. The normal state visual indication should be the same as indications without alarms."
    NORMAL
    "The out-of-service alarm state should be visually indicated in the HMI. The visual indication for an out-of-service alarm should not include a blinking element. The out-of-service alarm state indication should be distinct from the unacknowledged and acknowledged state indications. No audible indication should be used to identify out-of-service alarms."
    OUT_OF_SERVICE
    "The return-to-normal unacknowledged state should not use an audible indication. The return to-normal unacknowledged state visual indication may be the same as the normal state or it may indicate an unacknowledged status with a blinking element."
    RETURN_TO_NORMAL
    "The shelved alarm state should be visually indicated in the HMI. The visual indication for a shelved alarm should not include a blinking element. The shelved alarm state indication should be distinct. No audible indication should be used to identify shelved alarms."
    SHELVED
    "The suppressed-by-design alarm state should be visually indicated in the HMI. The visual indication for an alarm suppressed by design should not include a blinking element. The suppressed-by-design alarm state indication should be distinct from the unacknowledged and acknowledged state indications. No audible indication should be used to identify alarms suppressed by design."
    SUPPRESSED_BY_DESIGN
    "The unacknowledged alarm state should use both an audible indication and visual indication. The audible indication should be silenced with a silence action or acknowledge action by the operator. The visual indication should be clearly distinguishable from the normal state indication by using colours and symbols (e.g., shape or text). The visual indication for an unacknowledged alarm should include a blinking element. There are some environments in which an audible indication is not an effective indicator of unacknowledged alarms."
    UNACKNOWLEDGED
}

"Runtime entities of construction kit enum 'Industry.Basic/EventAlarmType'"
enum IndustryBasicEventAlarmType {
    ABSOLUTE
    ADAPTIVE
    ADJUSTABLE
    BAD_MEASUREMENT
    BIT_PATTERN
    CALCULATED
    CONTROLLER_OUTPUT
    DEVIATION
    DISCREPANCY
    FIRST_OUT
    INSTRUMENT_DIAGNOSTIC
    RATE_OF_CHANGE
    RECIPE_DRIVEN
    RE_ALARMING
    STATISTICAL
    SYSTEM_DIAGNOSTIC
}

"Runtime entities of construction kit enum 'Industry.Basic/State'"
enum IndustryBasicState {
    ERROR
    IDLE
    OFF
    ON
    UNKNOWN
}

"The type of search that is used (a text based search using text analysis (high performance, scoring, maybe more false positives) or filtering of attributes (lower performance, more exact results)"
enum SearchFilterTypes {
    ATTRIBUTE_FILTER
    TEXT_SEARCH
}

"Defines the sort order"
enum SortOrder {
    ASCENDING
    DESCENDING
}

"Defines the sort order"
enum SortOrders {
    ASCENDING
    DEFAULT
    DESCENDING
}

"Runtime entities of construction kit enum 'System.Communication/CommunicationState'"
enum SystemCommunicationCommunicationState {
    OFFLINE
    ONLINE
    UNREGISTERED
}

"Runtime entities of construction kit enum 'System.Communication/ConfigurationState'"
enum SystemCommunicationConfigurationState {
    DISABLED
    ENABLED
}

"Runtime entities of construction kit enum 'System.Communication/DeploymentState'"
enum SystemCommunicationDeploymentState {
    DEPLOYED
    ERROR
    PENDING
    UNKNOWN
}

"Runtime entities of construction kit enum 'System.Notification/NotificationStates'"
enum SystemNotificationNotificationStates {
    ERROR
    PENDING
    SENT
}

"Runtime entities of construction kit enum 'System.Notification/NotificationTypes'"
enum SystemNotificationNotificationTypes {
    E_MAIL
    SMS
}

"Enum of valid update types"
enum UpdateType {
    DELETE
    INSERT
    REPLACE
    UNDEFINED
    UPDATE
}

scalar BigInt

"A construction kit id of type CkAttributeId."
scalar CkAttributeId

"A construction kit id of type CkEnumId."
scalar CkEnumId

"A construction kit id of type CkRecordId."
scalar CkRecordId

"A construction kit id of type CkTypeId."
scalar CkTypeId

"The `DateTime` scalar type represents a date and time. `DateTime` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
scalar DateTime

scalar Decimal

scalar LargeBinary

"A unique identifier for an runtime object."
scalar OctoObjectId

"The `Seconds` scalar type represents a period of time represented as the total number of seconds in range [-922337203685, 922337203685]."
scalar Seconds

scalar SimpleScalarType

scalar Uri

input AttributeArgument {
    aggregationType: AggregationType
    sortOrder: SortOrder
    " Defines the priority of the sort. Lower values are sorted first; null values aren't sorted at all."
    sortPriority: Int
}

input BasicAddressInput {
    addressOfAdditionalLink: String
    addressRemarks: [String]
    cityTown: String
    department: String
    eMail: BasicEMailInput
    fax: BasicFaxNumberInput
    nationalCode: String
    pOBox: String
    phone: BasicPhoneNumberInput
    stateCounty: String
    street: String
    vATnumber: String
    zipOfPOBox: String
    zipcode: Int
}

input BasicAssetInput {
    configuredBy: [RtAssociationInput]
    description: String
    events: [RtAssociationInput]
    name: String
    parent: [RtAssociationInput]
    relatesTo: [RtAssociationInput]
    rtWellKnownName: String
}

input BasicAssetInputUpdate {
    "Item to update"
    item: BasicAssetInput!
    rtId: OctoObjectId
}

input BasicEMailInput {
    eMail: String
    publicKey: String
    typeOfEMail: BasicTypeOfTelephoneBasic
    typeOfPublicKey: String
}

input BasicEquipmentGroupInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    parent: [RtAssociationInput]
    relatesFrom: [RtAssociationInput]
    rtWellKnownName: String
}

input BasicEquipmentGroupInputUpdate {
    "Item to update"
    item: BasicEquipmentGroupInput!
    rtId: OctoObjectId
}

input BasicEquipmentModelInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    rtWellKnownName: String
}

input BasicEquipmentModelInputUpdate {
    "Item to update"
    item: BasicEquipmentModelInput!
    rtId: OctoObjectId
}

input BasicFaxNumberInput {
    number: String
    type: BasicTypeOfTelephoneBasic
}

input BasicMarkingInput {
    additionalText: String
    file: OctoObjectId
    name: String
}

input BasicNamePlateInput {
    address: BasicAddressInput
    assetSpecificProperties: [BasicMarkingInput]
    manufacturerName: String
    manufacturerProductDesignation: String
    manufacturerProductFamily: String
    markings: [BasicMarkingInput]
    serialNumber: String
    yearOfConstruction: String
}

input BasicPhoneNumberInput {
    number: String
    type: BasicTypeOfTelephoneEnhanced
}

input FieldFilter {
    attributeName: String!
    comparisonValue: SimpleScalarType
    operator: FieldFilterOperators
}

input FireGuardiansRestaurantInput {
    configuredBy: [RtAssociationInput]
    description: String
    location: PointInput
    name: String
    rtWellKnownName: String
}

input FireGuardiansRestaurantInputUpdate {
    "Item to update"
    item: FireGuardiansRestaurantInput!
    rtId: OctoObjectId
}

input GroupBy {
    avgAttributeNameList: [String]
    countAttributeNameList: [String]
    groupByAttributeNameList: [String]!
    maxValueAttributeNameList: [String]
    minValueAttributeNameList: [String]
}

input IndustryBasicAlarmInput {
    cause: String
    configuredBy: [RtAssociationInput]
    description: String
    eventSource: [RtAssociationInput]
    group: String
    message: String
    name: String
    reactivatedCount: Int
    rtWellKnownName: String
    source: IndustryBasicEventAlarmSource
    state: IndustryBasicEventAlarmState
    time: DateTime
    type: IndustryBasicEventAlarmType
}

input IndustryBasicAlarmInputUpdate {
    "Item to update"
    item: IndustryBasicAlarmInput!
    rtId: OctoObjectId
}

input IndustryBasicEventInput {
    configuredBy: [RtAssociationInput]
    description: String
    eventSource: [RtAssociationInput]
    message: String
    name: String
    rtWellKnownName: String
    time: DateTime
}

input IndustryBasicEventInputUpdate {
    "Item to update"
    item: IndustryBasicEventInput!
    rtId: OctoObjectId
}

input IndustryBasicMachineInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    events: [RtAssociationInput]
    name: String
    namePlate: BasicNamePlateInput
    operatingHours: Int
    parent: [RtAssociationInput]
    relatesTo: [RtAssociationInput]
    rtWellKnownName: String
    standStillCounter: Int
    state: IndustryBasicState
}

input IndustryBasicMachineInputUpdate {
    "Item to update"
    item: IndustryBasicMachineInput!
    rtId: OctoObjectId
}

input IndustryEnergyBatteryInput {
    ampere: Decimal
    capacity: Decimal
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    events: [RtAssociationInput]
    exportedEnergy: Decimal
    importedEnergy: Decimal
    name: String
    namePlate: BasicNamePlateInput
    numofCycles: Int
    operatingHours: Int
    parent: [RtAssociationInput]
    power: Decimal
    relatesTo: [RtAssociationInput]
    rtWellKnownName: String
    soC: Int
    soH: Int
    standStillCounter: Int
    state: IndustryBasicState
    temperature: Decimal
    voltage: Decimal
}

input IndustryEnergyBatteryInputUpdate {
    "Item to update"
    item: IndustryEnergyBatteryInput!
    rtId: OctoObjectId
}

input IndustryEnergyEnergyMeterInput {
    aCL1: IndustryEnergyPhaseInfoInput
    aCL2: IndustryEnergyPhaseInfoInput
    aCL3: IndustryEnergyPhaseInfoInput
    ampere: Decimal
    apparentPower: Decimal
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    events: [RtAssociationInput]
    exportedEnergy: Decimal
    frequency: Decimal
    importedEnergy: Decimal
    name: String
    namePlate: BasicNamePlateInput
    operatingHours: Int
    parent: [RtAssociationInput]
    power: Decimal
    reactivePower: Decimal
    relatesTo: [RtAssociationInput]
    rtWellKnownName: String
    standStillCounter: Int
    state: IndustryBasicState
    voltage: Decimal
}

input IndustryEnergyEnergyMeterInputUpdate {
    "Item to update"
    item: IndustryEnergyEnergyMeterInput!
    rtId: OctoObjectId
}

input IndustryEnergyInverterInput {
    aCL1: IndustryEnergyPhaseInfoInput
    aCL2: IndustryEnergyPhaseInfoInput
    aCL3: IndustryEnergyPhaseInfoInput
    ampere: Decimal
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    dCAmpere: Decimal
    dCVoltage: Decimal
    description: String
    events: [RtAssociationInput]
    maximumPower: Decimal
    name: String
    namePlate: BasicNamePlateInput
    operatingHours: Int
    parent: [RtAssociationInput]
    power: Decimal
    relatesTo: [RtAssociationInput]
    rtWellKnownName: String
    standStillCounter: Int
    state: IndustryBasicState
    voltage: Decimal
}

input IndustryEnergyInverterInputUpdate {
    "Item to update"
    item: IndustryEnergyInverterInput!
    rtId: OctoObjectId
}

input IndustryEnergyPhaseInfoInput {
    ampere: Decimal
    frequency: Decimal
    power: Decimal
    voltage: Decimal
}

input IndustryEnergyPhotovoltaicInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    events: [RtAssociationInput]
    name: String
    parent: [RtAssociationInput]
    relatesTo: [RtAssociationInput]
    rtWellKnownName: String
}

input IndustryEnergyPhotovoltaicInputUpdate {
    "Item to update"
    item: IndustryEnergyPhotovoltaicInput!
    rtId: OctoObjectId
}

input IndustryEnergyPhotovoltaicModuleInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    events: [RtAssociationInput]
    name: String
    namePlate: BasicNamePlateInput
    operatingHours: Int
    parent: [RtAssociationInput]
    peakPower: Decimal
    power: Decimal
    relatesTo: [RtAssociationInput]
    rtWellKnownName: String
    standStillCounter: Int
    state: IndustryBasicState
}

input IndustryEnergyPhotovoltaicModuleInputUpdate {
    "Item to update"
    item: IndustryEnergyPhotovoltaicModuleInput!
    rtId: OctoObjectId
}

input IndustryEnergyPhotovoltaicStringInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    events: [RtAssociationInput]
    name: String
    numOfModules: Int
    parent: [RtAssociationInput]
    power: Decimal
    relatesTo: [RtAssociationInput]
    rtWellKnownName: String
}

input IndustryEnergyPhotovoltaicStringInputUpdate {
    "Item to update"
    item: IndustryEnergyPhotovoltaicStringInput!
    rtId: OctoObjectId
}

input IndustryFluidHeatMeterInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    events: [RtAssociationInput]
    flow: Decimal
    flowTemperature: Decimal
    importedEnergy: Decimal
    name: String
    namePlate: BasicNamePlateInput
    operatingHours: Int
    parent: [RtAssociationInput]
    power: Decimal
    relatesTo: [RtAssociationInput]
    returnTemperature: Decimal
    rtWellKnownName: String
    standStillCounter: Int
    state: IndustryBasicState
    volume: Decimal
}

input IndustryFluidHeatMeterInputUpdate {
    "Item to update"
    item: IndustryFluidHeatMeterInput!
    rtId: OctoObjectId
}

input IndustryFluidWaterMeterInput {
    avgWaterTemperature: Decimal
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    events: [RtAssociationInput]
    maxWaterTemperature: Decimal
    minWaterTemperature: Decimal
    name: String
    namePlate: BasicNamePlateInput
    netVolume: Decimal
    operatingHours: Int
    parent: [RtAssociationInput]
    relatesTo: [RtAssociationInput]
    reverseVolume: Decimal
    rtWellKnownName: String
    standStillCounter: Int
    state: IndustryBasicState
    volume: Decimal
}

input IndustryFluidWaterMeterInputUpdate {
    "Item to update"
    item: IndustryFluidWaterMeterInput!
    rtId: OctoObjectId
}

input NearGeospatialFilter {
    attributeName: String!
    maxDistance: Float
    minDistance: Float
    point: PointInput!
}

input PointInput {
    coordinates: PositionInput!
}

input PositionInput {
    latitude: Float!
    longitude: Float!
}

"Input field for associations"
input RtAssociationInput {
    "Type of modification."
    modOption: AssociationModOptions
    "Runtime ID of the target entity"
    target: RtEntityId!
}

"Id information consists of CkTypeId and RtId"
input RtEntityId {
    "Construction kit type id of the object."
    ckTypeId: CkTypeId!
    "Unique id of the object."
    rtId: OctoObjectId!
}

input SearchFilter {
    attributeNames: [String]
    language: String
    searchTerm: String!
    type: SearchFilterTypes
}

input Sort {
    attributeName: String!
    sortOrder: SortOrders
}

input SystemAutoIncrementInput {
    configuredBy: [RtAssociationInput]
    currentValue: Int
    end: Int
    rtWellKnownName: String
    start: Int
}

input SystemAutoIncrementInputUpdate {
    "Item to update"
    item: SystemAutoIncrementInput!
    rtId: OctoObjectId
}

input SystemBotAttributeAggregateConfigurationInput {
    autoCompleteFilter: String
    autoCompleteLimit: Int
    configuredBy: [RtAssociationInput]
    configures: [RtAssociationInput]
    isAutoCompleteEnabled: Boolean
    rtWellKnownName: String
}

input SystemBotAttributeAggregateConfigurationInputUpdate {
    "Item to update"
    item: SystemBotAttributeAggregateConfigurationInput!
    rtId: OctoObjectId
}

input SystemBotServiceHookInput {
    configuredBy: [RtAssociationInput]
    enabled: Boolean
    fieldFilter: String
    name: String
    queryCkTypeId: String
    rtWellKnownName: String
    serviceHookAction: String
    serviceHookApiKey: String
    serviceHookBaseUri: String
}

input SystemBotServiceHookInputUpdate {
    "Item to update"
    item: SystemBotServiceHookInput!
    rtId: OctoObjectId
}

input SystemCommunicationDataPipelineInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    rtWellKnownName: String
}

input SystemCommunicationDataPipelineInputUpdate {
    "Item to update"
    item: SystemCommunicationDataPipelineInput!
    rtId: OctoObjectId
}

input SystemCommunicationDataPipelineTriggerInput {
    configuredBy: [RtAssociationInput]
    cronExpression: String
    deploymentState: SystemCommunicationDeploymentState
    description: String
    enabled: Boolean
    lastSeen: DateTime
    name: String
    rtWellKnownName: String
    triggers: [RtAssociationInput]
}

input SystemCommunicationDataPipelineTriggerInputUpdate {
    "Item to update"
    item: SystemCommunicationDataPipelineTriggerInput!
    rtId: OctoObjectId
}

input SystemCommunicationEdgeAdapterInput {
    communicationState: SystemCommunicationCommunicationState
    configuration: String
    configurationState: SystemCommunicationConfigurationState
    configuredBy: [RtAssociationInput]
    deploymentState: SystemCommunicationDeploymentState
    description: String
    executes: [RtAssociationInput]
    imageName: String
    imageVersion: String
    lastSeen: DateTime
    name: String
    parent: [RtAssociationInput]
    rtWellKnownName: String
    type: String
}

input SystemCommunicationEdgeAdapterInputUpdate {
    "Item to update"
    item: SystemCommunicationEdgeAdapterInput!
    rtId: OctoObjectId
}

input SystemCommunicationEdgePipelineInput {
    configuredBy: [RtAssociationInput]
    deploymentState: SystemCommunicationDeploymentState
    description: String
    executedBy: [RtAssociationInput]
    lastSeen: DateTime
    name: String
    parent: [RtAssociationInput]
    pipelineDefinition: String
    rtWellKnownName: String
}

input SystemCommunicationEdgePipelineInputUpdate {
    "Item to update"
    item: SystemCommunicationEdgePipelineInput!
    rtId: OctoObjectId
}

input SystemCommunicationMeshAdapterInput {
    communicationState: SystemCommunicationCommunicationState
    configuration: String
    configurationState: SystemCommunicationConfigurationState
    configuredBy: [RtAssociationInput]
    deploymentState: SystemCommunicationDeploymentState
    description: String
    executes: [RtAssociationInput]
    imageName: String
    imageVersion: String
    lastSeen: DateTime
    name: String
    parent: [RtAssociationInput]
    rtWellKnownName: String
    type: String
}

input SystemCommunicationMeshAdapterInputUpdate {
    "Item to update"
    item: SystemCommunicationMeshAdapterInput!
    rtId: OctoObjectId
}

input SystemCommunicationMeshPipelineInput {
    configuredBy: [RtAssociationInput]
    deploymentState: SystemCommunicationDeploymentState
    description: String
    executedBy: [RtAssociationInput]
    lastSeen: DateTime
    name: String
    parent: [RtAssociationInput]
    pipelineDefinition: String
    rtWellKnownName: String
    triggeredBy: [RtAssociationInput]
}

input SystemCommunicationMeshPipelineInputUpdate {
    "Item to update"
    item: SystemCommunicationMeshPipelineInput!
    rtId: OctoObjectId
}

input SystemCommunicationPoolInput {
    children: [RtAssociationInput]
    communicationState: SystemCommunicationCommunicationState
    configurationState: SystemCommunicationConfigurationState
    configuredBy: [RtAssociationInput]
    deploymentState: SystemCommunicationDeploymentState
    description: String
    lastSeen: DateTime
    name: String
    rtWellKnownName: String
}

input SystemCommunicationPoolInputUpdate {
    "Item to update"
    item: SystemCommunicationPoolInput!
    rtId: OctoObjectId
}

input SystemConfigurationInput {
    configurationValue: String
    configuredBy: [RtAssociationInput]
    rtWellKnownName: String
}

input SystemConfigurationInputUpdate {
    "Item to update"
    item: SystemConfigurationInput!
    rtId: OctoObjectId
}

input SystemNotificationNotificationMessageInput {
    bodyText: String
    configuredBy: [RtAssociationInput]
    errorText: String
    lastTryDateTime: DateTime
    notificationType: SystemNotificationNotificationTypes
    recipientAddress: String
    rtWellKnownName: String
    sendStatus: SystemNotificationNotificationStates
    sentDateTime: DateTime
    subjectText: String
}

input SystemNotificationNotificationMessageInputUpdate {
    "Item to update"
    item: SystemNotificationNotificationMessageInput!
    rtId: OctoObjectId
}

input SystemNotificationNotificationTemplateInput {
    bodyTemplate: String
    configuredBy: [RtAssociationInput]
    rtWellKnownName: String
    subjectTemplate: String
    type: SystemNotificationNotificationTypes
}

input SystemNotificationNotificationTemplateInputUpdate {
    "Item to update"
    item: SystemNotificationNotificationTemplateInput!
    rtId: OctoObjectId
}

input SystemQueryInput {
    attributeSearchFilter: String
    columns: String
    configuredBy: [RtAssociationInput]
    fieldFilter: String
    name: String
    queryCkTypeId: String
    rtWellKnownName: String
    sorting: String
    textSearchFilter: String
}

input SystemQueryInputUpdate {
    "Item to update"
    item: SystemQueryInput!
    rtId: OctoObjectId
}

input SystemTenantInput {
    configuredBy: [RtAssociationInput]
    databaseName: String
    parentTenantId: String
    rtWellKnownName: String
    tenantId: String
}

input SystemTenantInputUpdate {
    "Item to update"
    item: SystemTenantInput!
    rtId: OctoObjectId
}

input TimeFilter {
    from: DateTime!
    interval: Seconds
    limit: Int
    to: DateTime!
}
