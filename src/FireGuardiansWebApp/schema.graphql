# This file was generated. Do not edit manually.

schema {
    query: OctoQuery
    mutation: OctoMutation
    subscription: OctoSubscriptions
}

"Runtime entities of construction kit record 'Basic/Address'"
type BasicAddress {
    addressOfAdditionalLink: String
    addressRemarks: [String!]
    cityTown: String!
    constructionKitType: CkType
    department: String
    eMail: BasicEMail
    fax: BasicFaxNumber
    nationalCode: String!
    pOBox: String
    phone: BasicPhoneNumber
    stateCounty: String
    street: String!
    vATnumber: String
    zipOfPOBox: String
    zipcode: Int!
}

"Runtime entities of construction kit type 'Basic/Asset'"
type BasicAsset {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    children: BasicAsset_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: BasicAsset_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String!
    parent: BasicAsset_ParentUnion
    relatesFrom: BasicAsset_RelatesFromUnion
    relatesTo: BasicAsset_RelatesToUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `BasicAsset`."
type BasicAssetConnection {
    "Information to aid in pagination."
    edges: [BasicAssetEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicAsset]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicAsset`."
type BasicAssetEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicAsset
}

type BasicAssetMutations {
    "Creates new entities of type 'BasicAsset'."
    create(entities: [BasicAssetInput]!): [BasicAsset]
    "Deletes an entity of type 'BasicAsset'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicAsset'."
    update(entities: [BasicAssetInputUpdate]!): [BasicAsset]
}

type BasicAssetUpdate {
    "The corresponding item"
    item: BasicAsset
    updateState: UpdateType
}

type BasicAssetUpdateMessage {
    "The corresponding items"
    items: [BasicAssetUpdate]
}

"Association System/ParentChild (Inbound) of entity type BasicAsset"
type BasicAsset_ChildrenUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association System.Bot/Configures (Inbound) of entity type BasicAsset"
type BasicAsset_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type BasicAsset"
type BasicAsset_ParentUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTree(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association Basic/RelatedClassification (Inbound) of entity type BasicAsset"
type BasicAsset_RelatesFromUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
}

"Association Basic/RelatedClassification (Outbound) of entity type BasicAsset"
type BasicAsset_RelatesToUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Runtime entities of construction kit record 'Basic/BankAccount'"
type BasicBankAccount {
    accountHolder: String!
    bankName: String
    constructionKitType: CkType
    iban: String!
    swiftCode: String
}

"Runtime entities of construction kit type 'Basic/City'"
type BasicCity {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    children: BasicCity_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: BasicCity_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String!
    parent: BasicCity_ParentUnion
    relatesFrom: BasicCity_RelatesFromUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
    zipcode: Int!
}

"A connection to `BasicCity`."
type BasicCityConnection {
    "Information to aid in pagination."
    edges: [BasicCityEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicCity]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicCity`."
type BasicCityEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicCity
}

type BasicCityMutations {
    "Creates new entities of type 'BasicCity'."
    create(entities: [BasicCityInput]!): [BasicCity]
    "Deletes an entity of type 'BasicCity'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicCity'."
    update(entities: [BasicCityInputUpdate]!): [BasicCity]
}

type BasicCityUpdate {
    "The corresponding item"
    item: BasicCity
    updateState: UpdateType
}

type BasicCityUpdateMessage {
    "The corresponding items"
    items: [BasicCityUpdate]
}

"Association System/ParentChild (Inbound) of entity type BasicCity"
type BasicCity_ChildrenUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association System.Bot/Configures (Inbound) of entity type BasicCity"
type BasicCity_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type BasicCity"
type BasicCity_ParentUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTree(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association Basic/RelatedClassification (Inbound) of entity type BasicCity"
type BasicCity_RelatesFromUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
}

"Runtime entities of construction kit record 'Basic/Contact'"
type BasicContact {
    address: BasicAddress!
    companyName: String
    companyRegisterNumber: String
    constructionKitType: CkType
    email: String
    firstName: String
    lastName: String
    legalEntityType: BasicLegalEntityType!
    salutation: BasicSalutation
    taxIdentificationNumber: String
    titlePrefix: String
    titleSuffix: String
}

"Runtime entities of construction kit type 'Basic/Country'"
type BasicCountry {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    children: BasicCountry_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: BasicCountry_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String!
    parent: BasicCountry_ParentUnion
    relatesFrom: BasicCountry_RelatesFromUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `BasicCountry`."
type BasicCountryConnection {
    "Information to aid in pagination."
    edges: [BasicCountryEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicCountry]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicCountry`."
type BasicCountryEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicCountry
}

type BasicCountryMutations {
    "Creates new entities of type 'BasicCountry'."
    create(entities: [BasicCountryInput]!): [BasicCountry]
    "Deletes an entity of type 'BasicCountry'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicCountry'."
    update(entities: [BasicCountryInputUpdate]!): [BasicCountry]
}

type BasicCountryUpdate {
    "The corresponding item"
    item: BasicCountry
    updateState: UpdateType
}

type BasicCountryUpdateMessage {
    "The corresponding items"
    items: [BasicCountryUpdate]
}

"Association System/ParentChild (Inbound) of entity type BasicCountry"
type BasicCountry_ChildrenUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association System.Bot/Configures (Inbound) of entity type BasicCountry"
type BasicCountry_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type BasicCountry"
type BasicCountry_ParentUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTree(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association Basic/RelatedClassification (Inbound) of entity type BasicCountry"
type BasicCountry_RelatesFromUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
}

"Runtime entities of construction kit type 'Basic/District'"
type BasicDistrict {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    children: BasicDistrict_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: BasicDistrict_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String!
    parent: BasicDistrict_ParentUnion
    relatesFrom: BasicDistrict_RelatesFromUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `BasicDistrict`."
type BasicDistrictConnection {
    "Information to aid in pagination."
    edges: [BasicDistrictEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicDistrict]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicDistrict`."
type BasicDistrictEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicDistrict
}

type BasicDistrictMutations {
    "Creates new entities of type 'BasicDistrict'."
    create(entities: [BasicDistrictInput]!): [BasicDistrict]
    "Deletes an entity of type 'BasicDistrict'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicDistrict'."
    update(entities: [BasicDistrictInputUpdate]!): [BasicDistrict]
}

type BasicDistrictUpdate {
    "The corresponding item"
    item: BasicDistrict
    updateState: UpdateType
}

type BasicDistrictUpdateMessage {
    "The corresponding items"
    items: [BasicDistrictUpdate]
}

"Association System/ParentChild (Inbound) of entity type BasicDistrict"
type BasicDistrict_ChildrenUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association System.Bot/Configures (Inbound) of entity type BasicDistrict"
type BasicDistrict_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type BasicDistrict"
type BasicDistrict_ParentUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTree(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association Basic/RelatedClassification (Inbound) of entity type BasicDistrict"
type BasicDistrict_RelatesFromUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
}

"Runtime entities of construction kit type 'Basic/Document'"
type BasicDocument {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: BasicDocument_ConfiguredByUnion
    constructionKitType: CkType
    documentDate: DateTime!
    documentNumber: String!
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `BasicDocument`."
type BasicDocumentConnection {
    "Information to aid in pagination."
    edges: [BasicDocumentEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicDocument]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicDocument`."
type BasicDocumentEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicDocument
}

type BasicDocumentUpdate {
    "The corresponding item"
    item: BasicDocument
    updateState: UpdateType
}

type BasicDocumentUpdateMessage {
    "The corresponding items"
    items: [BasicDocumentUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type BasicDocument"
type BasicDocument_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit record 'Basic/EMail'"
type BasicEMail {
    constructionKitType: CkType
    eMail: String!
    publicKey: String
    typeOfEMail: BasicTypeOfTelephoneBasic
    typeOfPublicKey: String
}

"Runtime entities of construction kit record 'Basic/FaxNumber'"
type BasicFaxNumber {
    constructionKitType: CkType
    number: String!
    type: BasicTypeOfTelephoneBasic
}

"Runtime entities of construction kit record 'Basic/Marking'"
type BasicMarking {
    additionalText: String
    constructionKitType: CkType
    file: LargeBinaryInfo!
    name: String!
}

"Runtime entities of construction kit record 'Basic/NamePlate'"
type BasicNamePlate {
    address: BasicAddress
    assetSpecificProperties: [BasicMarking!]
    constructionKitType: CkType
    manufacturerName: String!
    manufacturerProductDesignation: String!
    manufacturerProductFamily: String!
    markings: [BasicMarking!]
    serialNumber: String
    yearOfConstruction: String!
}

"Runtime entities of construction kit type 'Basic/NamedEntity'"
type BasicNamedEntity {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: BasicNamedEntity_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String!
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `BasicNamedEntity`."
type BasicNamedEntityConnection {
    "Information to aid in pagination."
    edges: [BasicNamedEntityEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicNamedEntity]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicNamedEntity`."
type BasicNamedEntityEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicNamedEntity
}

type BasicNamedEntityUpdate {
    "The corresponding item"
    item: BasicNamedEntity
    updateState: UpdateType
}

type BasicNamedEntityUpdateMessage {
    "The corresponding items"
    items: [BasicNamedEntityUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type BasicNamedEntity"
type BasicNamedEntity_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit record 'Basic/PhoneNumber'"
type BasicPhoneNumber {
    constructionKitType: CkType
    number: String!
    type: BasicTypeOfTelephoneEnhanced
}

"Runtime entities of construction kit type 'Basic/State'"
type BasicState {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    children: BasicState_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: BasicState_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String!
    parent: BasicState_ParentUnion
    relatesFrom: BasicState_RelatesFromUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `BasicState`."
type BasicStateConnection {
    "Information to aid in pagination."
    edges: [BasicStateEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicState]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicState`."
type BasicStateEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicState
}

type BasicStateMutations {
    "Creates new entities of type 'BasicState'."
    create(entities: [BasicStateInput]!): [BasicState]
    "Deletes an entity of type 'BasicState'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicState'."
    update(entities: [BasicStateInputUpdate]!): [BasicState]
}

type BasicStateUpdate {
    "The corresponding item"
    item: BasicState
    updateState: UpdateType
}

type BasicStateUpdateMessage {
    "The corresponding items"
    items: [BasicStateUpdate]
}

"Association System/ParentChild (Inbound) of entity type BasicState"
type BasicState_ChildrenUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association System.Bot/Configures (Inbound) of entity type BasicState"
type BasicState_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type BasicState"
type BasicState_ParentUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTree(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association Basic/RelatedClassification (Inbound) of entity type BasicState"
type BasicState_RelatesFromUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
}

"Runtime entities of construction kit record 'Basic/TimeRange'"
type BasicTimeRange {
    constructionKitType: CkType
    from: DateTime!
    to: DateTime!
}

"Runtime entities of construction kit type 'Basic/Tree'"
type BasicTree {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    children: BasicTree_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: BasicTree_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String!
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `BasicTree`."
type BasicTreeConnection {
    "Information to aid in pagination."
    edges: [BasicTreeEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicTree]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicTree`."
type BasicTreeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicTree
}

type BasicTreeMutations {
    "Creates new entities of type 'BasicTree'."
    create(entities: [BasicTreeInput]!): [BasicTree]
    "Deletes an entity of type 'BasicTree'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicTree'."
    update(entities: [BasicTreeInputUpdate]!): [BasicTree]
}

"Runtime entities of construction kit type 'Basic/TreeNode'"
type BasicTreeNode {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    children: BasicTreeNode_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: BasicTreeNode_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    name: String!
    parent: BasicTreeNode_ParentUnion
    relatesFrom: BasicTreeNode_RelatesFromUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `BasicTreeNode`."
type BasicTreeNodeConnection {
    "Information to aid in pagination."
    edges: [BasicTreeNodeEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [BasicTreeNode]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `BasicTreeNode`."
type BasicTreeNodeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: BasicTreeNode
}

type BasicTreeNodeMutations {
    "Creates new entities of type 'BasicTreeNode'."
    create(entities: [BasicTreeNodeInput]!): [BasicTreeNode]
    "Deletes an entity of type 'BasicTreeNode'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'BasicTreeNode'."
    update(entities: [BasicTreeNodeInputUpdate]!): [BasicTreeNode]
}

type BasicTreeNodeUpdate {
    "The corresponding item"
    item: BasicTreeNode
    updateState: UpdateType
}

type BasicTreeNodeUpdateMessage {
    "The corresponding items"
    items: [BasicTreeNodeUpdate]
}

"Association System/ParentChild (Inbound) of entity type BasicTreeNode"
type BasicTreeNode_ChildrenUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association System.Bot/Configures (Inbound) of entity type BasicTreeNode"
type BasicTreeNode_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type BasicTreeNode"
type BasicTreeNode_ParentUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTree(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association Basic/RelatedClassification (Inbound) of entity type BasicTreeNode"
type BasicTreeNode_RelatesFromUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
}

type BasicTreeUpdate {
    "The corresponding item"
    item: BasicTree
    updateState: UpdateType
}

type BasicTreeUpdateMessage {
    "The corresponding items"
    items: [BasicTreeUpdate]
}

"Association System/ParentChild (Inbound) of entity type BasicTree"
type BasicTree_ChildrenUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
}

"Association System.Bot/Configures (Inbound) of entity type BasicTree"
type BasicTree_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Construction kit attribute definitions"
type CkAttribute {
    "Value type of the attribute."
    attributeValueType: AttributeValueType!
    "Construction kit attribute id."
    ckAttributeId: CkAttributeId!
    "Optional enum id of the attribute value type."
    ckEnum: CkEnum
    "Optional record id of the attribute value type."
    ckRecord: CkRecord
    "Default values of the attribute."
    defaultValues: [SimpleScalar]
    "Optional description of the attribute."
    description: String
    "Optional flag that tells if an attribute is a data stream."
    isDataStream: Boolean
    "Optional meta data of the attribute."
    metaData: [CkAttributeMetaData]
}

"A connection from an object to a list of objects of type `CkAttributeDto`."
type CkAttributeDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkAttributeDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkAttribute]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkAttributeDto`."
type CkAttributeDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkAttribute
}

"Construction kit attribute meta data"
type CkAttributeMetaData {
    "Optional description of the meta data."
    description: String
    "Key of the meta data."
    key: ID!
    "Value of the meta data."
    value: String
}

"Definition of a construction kit record with name and attributes."
type CkEnum {
    "Construction kit enum id, the unique identifier of the enum."
    ckEnumId: CkEnumId!
    "Optional description of the record."
    description: String
    "Whether the enum is extensible for customization."
    isExtensible: Boolean!
    "Whether the enum is a flags enum"
    useFlags: Boolean!
    "Values of the enum."
    values: [CkEnumValue]!
}

"A connection from an object to a list of objects of type `CkEnumDto`."
type CkEnumDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkEnumDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkEnum]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkEnumDto`."
type CkEnumDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkEnum
}

type CkEnumMutations {
    "Updates customizations of enum extensions."
    updateValueExtensions(
        "The ID of the enum."
        values: [CkEnumUpdate]!
    ): [CkEnum]
}

"A construction kit enum value"
type CkEnumValue {
    "Description of enum value"
    description: String
    "True, when the enum value is a custom extension, otherwise false"
    isExtension: Boolean
    "Unique key of enum value"
    key: Int
    "Name of enum value"
    name: String
}

"A construction kit model"
type CkModel {
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the entity with the given attribute id."
        ckId: String,
        "Returns entities with the given attribute ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkAttributeDtoConnection
    dependencies: [CkModelId]
    "Optional description of the model."
    description: String
    enums(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the enum with the given enum id."
        ckId: String,
        "Returns enums with the given enum ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkEnumDtoConnection
    "Construction kit model id, the unique identifier of the model."
    id: CkModelId!
    "Availability of the model within the repository."
    modelState: ModelState
    records(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the record with the given record id."
        ckId: String,
        "Returns records with the given record ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkRecordDtoConnection
    types(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the construction kit type with the given id."
        ckId: String,
        "Returns the construction kit types with the given ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkTypeDtoConnection
}

"A connection from an object to a list of objects of type `CkModelDto`."
type CkModelDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkModelDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkModel]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkModelDto`."
type CkModelDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkModel
}

"Definition of a construction kit record with name and attributes."
type CkRecord {
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Allows to filter for specific attribute names within construction kit records."
        attributeNames: [String],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): CkTypeAttributeDtoConnection
    "The base record the current record is derived from."
    baseRecordTypes: CkType
    "Construction kit record id, the unique identifier of the record."
    ckRecordId: CkRecordId!
    "Lists types that are derived from the current construction kit record."
    derivedRecordTypes(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): CkTypeDtoConnection
    "Optional description of the record."
    description: String
    "Indicates if the record is abstract."
    isAbstract: Boolean!
    "Indicates if the record is final."
    isFinal: Boolean!
}

"A connection from an object to a list of objects of type `CkRecordDto`."
type CkRecordDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkRecordDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkRecord]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkRecordDto`."
type CkRecordDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkRecord
}

"Definition of a construction kit type with name, associations and attributes."
type CkType {
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Filters for attributes containing the given term in an attribute name."
        attributeNameContains: String,
        "Allows to filter for specific attribute names within construction kit types."
        attributeNames: [String],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): CkTypeAttributeDtoConnection
    availableQueryColumns(
        "Only return edges after the specified cursor."
        after: String,
        "Filters for attributes containing the given term in an attribute path."
        attributePathContains: String,
        "Allows to filter for specific attribute paths within construction kit types."
        attributePaths: [String],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): CkTypeQueryColumnDtoConnection
    "The base type the current type is derived from."
    baseType: CkType
    "Construction kit type id, the unique identifier of the type."
    ckTypeId: CkTypeId!
    "Lists types that are derived from the current construction kit type."
    derivedTypes(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "When true, abstract constrution kit types are not returned in result set."
        ignoreAbstractTypes: Boolean
    ): CkTypeDtoConnection
    "Optional description of the type."
    description: String
    "Lists types that are derived directly or indirectly from the current construction kit type."
    directAndIndirectDerivedTypes(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "When true, abstract constrution kit types are not returned in result set."
        ignoreAbstractTypes: Boolean,
        "When true, the current construction kit type is included in the result set."
        includeSelf: Boolean
    ): CkTypeDtoConnection
    "Indicates if the type is abstract."
    isAbstract: Boolean!
    "Indicates if the type is final."
    isFinal: Boolean!
}

"Attributes of a construction kit type"
type CkTypeAttribute {
    "The construction kit attribute definition"
    attribute: CkAttribute
    "Attribute name within the entity."
    attributeName: String!
    "Value type of the attribute."
    attributeValueType: AttributeValueType!
    "Auto complete values for the attribute."
    autoCompleteValues: [String]
    "Auto increment reference for the attribute."
    autoIncrementReference: String
    "Construction kit attribute id."
    ckAttributeId: CkAttributeId!
    "Defines if the attribute is optional."
    isOptional: Boolean!
}

"A connection from an object to a list of objects of type `CkTypeAttributeDto`."
type CkTypeAttributeDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkTypeAttributeDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkTypeAttribute]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkTypeAttributeDto`."
type CkTypeAttributeDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkTypeAttribute
}

"A connection from an object to a list of objects of type `CkTypeDto`."
type CkTypeDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkTypeDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkType]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkTypeDto`."
type CkTypeDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkType
}

"Represents a possible column in a query result."
type CkTypeQueryColumn {
    "Attribute path within the entity."
    attributePath: String!
    "Value type of the attribute."
    attributeValueType: AttributeValueType!
}

"A connection from an object to a list of objects of type `CkTypeQueryColumnDto`."
type CkTypeQueryColumnDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [CkTypeQueryColumnDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [CkTypeQueryColumn]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `CkTypeQueryColumnDto`."
type CkTypeQueryColumnDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CkTypeQueryColumn
}

"Construction Kit element mutations"
type ConstructionKitMutations {
    enums(
        "CkEnumId to filter for"
        ckId: String,
        "CkEnumIds to filter for"
        ckIds: [String]
    ): CkEnumMutations
}

type ConstructionKitQuery {
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the entity with the given attribute id."
        ckId: String,
        "Returns entities with the given attribute ids."
        ckIds: [String],
        "Filters items based on model ids"
        ckModelIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkAttributeDtoConnection
    enums(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the enum with the given enum id."
        ckId: String,
        "Returns enums with the given enum ids."
        ckIds: [String],
        "Filters items based on model ids"
        ckModelIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkEnumDtoConnection
    models(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the construction kit model with the given id."
        ckId: String,
        "Returns the construction kit models with the given ids."
        ckIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkModelDtoConnection
    records(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the record with the given record id."
        ckId: String,
        "Returns records with the given record ids."
        ckIds: [String],
        "Filters items based on model ids"
        ckModelIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkRecordDtoConnection
    types(
        "Only return edges after the specified cursor."
        after: String,
        "Returns the construction kit type with the given id."
        ckId: String,
        "Returns the construction kit types with the given ids."
        ckIds: [String],
        "Filters items based on model ids"
        ckModelIds: [String],
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): CkTypeDtoConnection
}

"Runtime entities of construction kit type 'FireGuardians/FireReport'"
type FireGuardiansFireReport {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: FireGuardiansFireReport_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    image: LargeBinaryInfo
    initialNotificationSent: Boolean
    location: RtGeospatialValueDto!
    name: String!
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `FireGuardiansFireReport`."
type FireGuardiansFireReportConnection {
    "Information to aid in pagination."
    edges: [FireGuardiansFireReportEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [FireGuardiansFireReport]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `FireGuardiansFireReport`."
type FireGuardiansFireReportEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: FireGuardiansFireReport
}

type FireGuardiansFireReportMutations {
    "Creates new entities of type 'FireGuardiansFireReport'."
    create(entities: [FireGuardiansFireReportInput]!): [FireGuardiansFireReport]
    "Deletes an entity of type 'FireGuardiansFireReport'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'FireGuardiansFireReport'."
    update(entities: [FireGuardiansFireReportInputUpdate]!): [FireGuardiansFireReport]
}

type FireGuardiansFireReportUpdate {
    "The corresponding item"
    item: FireGuardiansFireReport
    updateState: UpdateType
}

type FireGuardiansFireReportUpdateMessage {
    "The corresponding items"
    items: [FireGuardiansFireReportUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type FireGuardiansFireReport"
type FireGuardiansFireReport_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'FireGuardians/NotificationSubscription'"
type FireGuardiansNotificationSubscription {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: FireGuardiansNotificationSubscription_ConfiguredByUnion
    constructionKitType: CkType
    endpoint: String!
    parent: FireGuardiansNotificationSubscription_ParentUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
    subscriptionConfiguration: String
}

"A connection to `FireGuardiansNotificationSubscription`."
type FireGuardiansNotificationSubscriptionConnection {
    "Information to aid in pagination."
    edges: [FireGuardiansNotificationSubscriptionEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [FireGuardiansNotificationSubscription]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `FireGuardiansNotificationSubscription`."
type FireGuardiansNotificationSubscriptionEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: FireGuardiansNotificationSubscription
}

type FireGuardiansNotificationSubscriptionMutations {
    "Creates new entities of type 'FireGuardiansNotificationSubscription'."
    create(entities: [FireGuardiansNotificationSubscriptionInput]!): [FireGuardiansNotificationSubscription]
    "Deletes an entity of type 'FireGuardiansNotificationSubscription'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'FireGuardiansNotificationSubscription'."
    update(entities: [FireGuardiansNotificationSubscriptionInputUpdate]!): [FireGuardiansNotificationSubscription]
}

type FireGuardiansNotificationSubscriptionUpdate {
    "The corresponding item"
    item: FireGuardiansNotificationSubscription
    updateState: UpdateType
}

type FireGuardiansNotificationSubscriptionUpdateMessage {
    "The corresponding items"
    items: [FireGuardiansNotificationSubscriptionUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type FireGuardiansNotificationSubscription"
type FireGuardiansNotificationSubscription_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type FireGuardiansNotificationSubscription"
type FireGuardiansNotificationSubscription_ParentUnion {
    fireGuardiansWallet(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansWalletConnection
}

"Runtime entities of construction kit type 'FireGuardians/Wallet'"
type FireGuardiansWallet {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    children: FireGuardiansWallet_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: FireGuardiansWallet_ConfiguredByUnion
    constructionKitType: CkType
    description: String
    identityId: String!
    lastNotificationUpdate: DateTime
    location: RtGeospatialValueDto
    name: String!
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `FireGuardiansWallet`."
type FireGuardiansWalletConnection {
    "Information to aid in pagination."
    edges: [FireGuardiansWalletEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [FireGuardiansWallet]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `FireGuardiansWallet`."
type FireGuardiansWalletEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: FireGuardiansWallet
}

type FireGuardiansWalletMutations {
    "Creates new entities of type 'FireGuardiansWallet'."
    create(entities: [FireGuardiansWalletInput]!): [FireGuardiansWallet]
    "Deletes an entity of type 'FireGuardiansWallet'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'FireGuardiansWallet'."
    update(entities: [FireGuardiansWalletInputUpdate]!): [FireGuardiansWallet]
}

type FireGuardiansWalletUpdate {
    "The corresponding item"
    item: FireGuardiansWallet
    updateState: UpdateType
}

type FireGuardiansWalletUpdateMessage {
    "The corresponding items"
    items: [FireGuardiansWalletUpdate]
}

"Association System/ParentChild (Inbound) of entity type FireGuardiansWallet"
type FireGuardiansWallet_ChildrenUnion {
    fireGuardiansNotificationSubscription(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansNotificationSubscriptionConnection
}

"Association System.Bot/Configures (Inbound) of entity type FireGuardiansWallet"
type FireGuardiansWallet_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Meta information for large binaries"
type LargeBinaryInfo {
    "Returns the id of binary"
    binaryId: OctoObjectId!
    "Returns the content type of the binary"
    contentType: String!
    "Returns the download link of the binary"
    downloadUri: Uri!
    "Returns the filename of the binary"
    filename: String!
    "Returns the size of the binary"
    size: BigInt!
}

type OctoMutation {
    constructionKit: ConstructionKitMutations
    runtime: Runtime
}

type OctoQuery {
    constructionKit: ConstructionKitQuery
    runtime: RuntimeModelQuery
}

type OctoSubscriptions {
    basicAssetEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicAssetUpdateMessage
    basicCityEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicCityUpdateMessage
    basicCountryEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicCountryUpdateMessage
    basicDistrictEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicDistrictUpdateMessage
    basicDocumentEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicDocumentUpdateMessage
    basicNamedEntityEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicNamedEntityUpdateMessage
    basicStateEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicStateUpdateMessage
    basicTreeEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicTreeUpdateMessage
    basicTreeNodeEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): BasicTreeNodeUpdateMessage
    fireGuardiansFireReportEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): FireGuardiansFireReportUpdateMessage
    fireGuardiansNotificationSubscriptionEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): FireGuardiansNotificationSubscriptionUpdateMessage
    fireGuardiansWalletEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): FireGuardiansWalletUpdateMessage
    systemAutoIncrementEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemAutoIncrementUpdateMessage
    systemBotAttributeAggregateConfigurationEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemBotAttributeAggregateConfigurationUpdateMessage
    systemBotServiceHookEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemBotServiceHookUpdateMessage
    systemConfigurationEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemConfigurationUpdateMessage
    systemEntityEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemEntityUpdateMessage
    systemNotificationCssTemplateConfigurationEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemNotificationCssTemplateConfigurationUpdateMessage
    systemNotificationEventEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemNotificationEventUpdateMessage
    systemNotificationNotificationTemplateEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemNotificationNotificationTemplateUpdateMessage
    systemNotificationStatefulEventEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemNotificationStatefulEventUpdateMessage
    systemQueryEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemQueryUpdateMessage
    systemTenantConfigurationEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemTenantConfigurationUpdateMessage
    systemTenantEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemTenantUpdateMessage
    systemUIPageEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemUIPageUpdateMessage
    systemUIStudioRootEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemUIStudioRootUpdateMessage
    systemUIStudioTreeItemEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemUIStudioTreeItemUpdateMessage
    systemUIUIElementEvents(beforeFieldFilter: [FieldFilter], fieldFilter: [FieldFilter], rtId: OctoObjectId, updateTypes: [UpdateType]!): SystemUIUIElementUpdateMessage
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type Point {
    coordinates: Position
}

type Position {
    altitude: Float
    latitude: Float!
    longitude: Float!
}

"A runtime entity type of Octo"
type RtEntity {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    attributes(
        "Only return edges after the specified cursor."
        after: String,
        "Filter of attribute names"
        attributeNames: [String],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): RtEntityAttributeDtoConnection
    ckTypeId: CkTypeId
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId
    rtVersion: ULong
    rtWellKnownName: String
}

"Attribute of a runtime entity"
type RtEntityAttribute {
    "Attribute name within the entity."
    attributeName: String
    "Value of a scalar attribute."
    value: SimpleScalar
}

"A connection from an object to a list of objects of type `RtEntityAttributeDto`."
type RtEntityAttributeDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [RtEntityAttributeDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [RtEntityAttribute]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `RtEntityAttributeDto`."
type RtEntityAttributeDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: RtEntityAttribute
}

"A connection from an object to a list of objects of type `RtEntityGenericDto`."
type RtEntityGenericDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [RtEntityGenericDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [RtEntity]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `RtEntityGenericDto`."
type RtEntityGenericDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: RtEntity
}

type RtGeospatialValueDto {
    distance: Float
    point: Point
}

"Represents a runtime query exection."
type RtQuery {
    associatedCkTypeId: CkTypeId!
    columns: [RtQueryColumn!]!
    queryRtId: OctoObjectId!
    rows(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): RtQueryRowDtoConnection
}

"Represents a cell of a row within a runtime query execution."
type RtQueryCell {
    "Path of the attribute within an entity."
    attributePath: String!
    "Value of the cell."
    value: SimpleScalar
}

"A connection from an object to a list of objects of type `RtQueryCellDto`."
type RtQueryCellDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [RtQueryCellDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [RtQueryCell!]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `RtQueryCellDto`."
type RtQueryCellDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: RtQueryCell!
}

"Represents a column within a query"
type RtQueryColumn {
    attributePath: String
    attributeValueType: AttributeValueType
}

"A connection from an object to a list of objects of type `RtQueryDto`."
type RtQueryDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [RtQueryDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [RtQuery!]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `RtQueryDto`."
type RtQueryDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: RtQuery!
}

type RtQueryMutations {
    "Create entities of a runtime query."
    create(entities: [RtQueryRowInput!]!): [RtQueryRow!]!
    "Deletes entities of a runtime query."
    delete(entities: [RtEntityId!]!): Boolean!
    "Updates entities of a runtime query."
    update(entities: [RtQueryRowUpdate!]!): [RtQueryRow!]!
}

"Represents a row within a runtime query execution"
type RtQueryRow {
    cells(
        "Only return edges after the specified cursor."
        after: String,
        "List of attribute paths to filter for."
        attributePaths: [String],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): RtQueryCellDtoConnection
    ckTypeId: CkTypeId
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection from an object to a list of objects of type `RtQueryRowDto`."
type RtQueryRowDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [RtQueryRowDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [RtQueryRow!]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `RtQueryRowDto`."
type RtQueryRowDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: RtQueryRow!
}

"Represents a runtime query exection."
type RtTransientQuery {
    associatedCkTypeId: CkTypeId!
    columns: [RtQueryColumn!]!
    rows(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int
    ): RtQueryRowDtoConnection
}

"A connection from an object to a list of objects of type `RtTransientQueryDto`."
type RtTransientQueryDtoConnection {
    "A list of all of the edges returned in the connection."
    edges: [RtTransientQueryDtoEdge]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [RtTransientQuery!]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `RtTransientQueryDto`."
type RtTransientQueryDtoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: RtTransientQuery!
}

type Runtime {
    "Mutation for entities of type 'BasicAsset'."
    basicAssets: BasicAssetMutations
    "Mutation for entities of type 'BasicCity'."
    basicCitys: BasicCityMutations
    "Mutation for entities of type 'BasicCountry'."
    basicCountrys: BasicCountryMutations
    "Mutation for entities of type 'BasicDistrict'."
    basicDistricts: BasicDistrictMutations
    "Mutation for entities of type 'BasicState'."
    basicStates: BasicStateMutations
    "Mutation for entities of type 'BasicTreeNode'."
    basicTreeNodes: BasicTreeNodeMutations
    "Mutation for entities of type 'BasicTree'."
    basicTrees: BasicTreeMutations
    "Mutation for entities of type 'FireGuardiansFireReport'."
    fireGuardiansFireReports: FireGuardiansFireReportMutations
    "Mutation for entities of type 'FireGuardiansNotificationSubscription'."
    fireGuardiansNotificationSubscriptions: FireGuardiansNotificationSubscriptionMutations
    "Mutation for entities of type 'FireGuardiansWallet'."
    fireGuardiansWallets: FireGuardiansWalletMutations
    runtimeQuery(
        "The query runtime id."
        rtId: OctoObjectId!
    ): RtQueryMutations
    "Mutation for entities of type 'SystemAutoIncrement'."
    systemAutoIncrements: SystemAutoIncrementMutations
    "Mutation for entities of type 'SystemBotAttributeAggregateConfiguration'."
    systemBotAttributeAggregateConfigurations: SystemBotAttributeAggregateConfigurationMutations
    "Mutation for entities of type 'SystemBotServiceHook'."
    systemBotServiceHooks: SystemBotServiceHookMutations
    "Mutation for entities of type 'SystemNotificationCssTemplateConfiguration'."
    systemNotificationCssTemplateConfigurations: SystemNotificationCssTemplateConfigurationMutations
    "Mutation for entities of type 'SystemNotificationEvent'."
    systemNotificationEvents: SystemNotificationEventMutations
    "Mutation for entities of type 'SystemNotificationNotificationTemplate'."
    systemNotificationNotificationTemplates: SystemNotificationNotificationTemplateMutations
    "Mutation for entities of type 'SystemNotificationStatefulEvent'."
    systemNotificationStatefulEvents: SystemNotificationStatefulEventMutations
    "Mutation for entities of type 'SystemQuery'."
    systemQuerys: SystemQueryMutations
    "Mutation for entities of type 'SystemTenantConfiguration'."
    systemTenantConfigurations: SystemTenantConfigurationMutations
    "Mutation for entities of type 'SystemTenant'."
    systemTenants: SystemTenantMutations
    "Mutation for entities of type 'SystemUIPage'."
    systemUIPages: SystemUIPageMutations
    "Mutation for entities of type 'SystemUIStudioRoot'."
    systemUIStudioRoots: SystemUIStudioRootMutations
    "Mutation for entities of type 'SystemUIStudioTreeItem'."
    systemUIStudioTreeItems: SystemUIStudioTreeItemMutations
}

type RuntimeModelQuery {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicDocument(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDocumentConnection
    basicNamedEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicNamedEntityConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTree(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
    fireGuardiansFireReport(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansFireReportConnection
    fireGuardiansNotificationSubscription(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansNotificationSubscriptionConnection
    fireGuardiansWallet(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansWalletConnection
    runtimeEntities(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    runtimeQuery(
        "Only return edges after the specified cursor."
        after: String,
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "The query runtime id."
        rtId: OctoObjectId!
    ): RtQueryDtoConnection
    systemAutoIncrement(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemAutoIncrementConnection
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
    systemBotServiceHook(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotServiceHookConnection
    systemConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemConfigurationConnection
    systemEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemEntityConnection
    systemNotificationCssTemplateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationCssTemplateConfigurationConnection
    systemNotificationEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationEventConnection
    systemNotificationNotificationTemplate(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationNotificationTemplateConnection
    systemNotificationStatefulEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationStatefulEventConnection
    systemQuery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemQueryConnection
    systemTenant(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemTenantConnection
    systemTenantConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemTenantConfigurationConnection
    systemUIPage(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemUIPageConnection
    systemUIStudioRoot(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemUIStudioRootConnection
    systemUIStudioTreeItem(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemUIStudioTreeItemConnection
    systemUIUIElement(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Geospatial filter for items, that searches for items near a point"
        geoNearFilter: NearGeospatialFilter,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemUIUIElementConnection
    transientRuntimeQuery(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The column paths to include in the result."
        columnPaths: [String!]!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtTransientQueryDtoConnection
}

"Runtime entities of construction kit record 'System/AttributeSearchFilter'"
type SystemAttributeSearchFilter {
    attributePaths: [String!]!
    constructionKitType: CkType
    searchValue: String!
}

"Runtime entities of construction kit type 'System/AutoIncrement'"
type SystemAutoIncrement {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: SystemAutoIncrement_ConfiguredByUnion
    constructionKitType: CkType
    currentValue: Int
    end: Int!
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
    start: Int!
}

"A connection to `SystemAutoIncrement`."
type SystemAutoIncrementConnection {
    "Information to aid in pagination."
    edges: [SystemAutoIncrementEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemAutoIncrement]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemAutoIncrement`."
type SystemAutoIncrementEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemAutoIncrement
}

type SystemAutoIncrementMutations {
    "Creates new entities of type 'SystemAutoIncrement'."
    create(entities: [SystemAutoIncrementInput]!): [SystemAutoIncrement]
    "Deletes an entity of type 'SystemAutoIncrement'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemAutoIncrement'."
    update(entities: [SystemAutoIncrementInputUpdate]!): [SystemAutoIncrement]
}

type SystemAutoIncrementUpdate {
    "The corresponding item"
    item: SystemAutoIncrement
    updateState: UpdateType
}

type SystemAutoIncrementUpdateMessage {
    "The corresponding items"
    items: [SystemAutoIncrementUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemAutoIncrement"
type SystemAutoIncrement_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Bot/AttributeAggregateConfiguration'"
type SystemBotAttributeAggregateConfiguration {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    autoCompleteFilter: String!
    autoCompleteLimit: Int!
    ckTypeId: CkTypeId
    configuredBy: SystemBotAttributeAggregateConfiguration_ConfiguredByUnion
    configures: SystemBotAttributeAggregateConfiguration_ConfiguresUnion
    constructionKitType: CkType
    isAutoCompleteEnabled: Boolean!
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `SystemBotAttributeAggregateConfiguration`."
type SystemBotAttributeAggregateConfigurationConnection {
    "Information to aid in pagination."
    edges: [SystemBotAttributeAggregateConfigurationEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemBotAttributeAggregateConfiguration]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemBotAttributeAggregateConfiguration`."
type SystemBotAttributeAggregateConfigurationEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemBotAttributeAggregateConfiguration
}

type SystemBotAttributeAggregateConfigurationMutations {
    "Creates new entities of type 'SystemBotAttributeAggregateConfiguration'."
    create(entities: [SystemBotAttributeAggregateConfigurationInput]!): [SystemBotAttributeAggregateConfiguration]
    "Deletes an entity of type 'SystemBotAttributeAggregateConfiguration'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemBotAttributeAggregateConfiguration'."
    update(entities: [SystemBotAttributeAggregateConfigurationInputUpdate]!): [SystemBotAttributeAggregateConfiguration]
}

type SystemBotAttributeAggregateConfigurationUpdate {
    "The corresponding item"
    item: SystemBotAttributeAggregateConfiguration
    updateState: UpdateType
}

type SystemBotAttributeAggregateConfigurationUpdateMessage {
    "The corresponding items"
    items: [SystemBotAttributeAggregateConfigurationUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemBotAttributeAggregateConfiguration"
type SystemBotAttributeAggregateConfiguration_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System.Bot/Configures (Outbound) of entity type SystemBotAttributeAggregateConfiguration"
type SystemBotAttributeAggregateConfiguration_ConfiguresUnion {
    basicAsset(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicAssetConnection
    basicCity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCityConnection
    basicCountry(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicCountryConnection
    basicDistrict(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDistrictConnection
    basicDocument(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicDocumentConnection
    basicNamedEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicNamedEntityConnection
    basicState(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicStateConnection
    basicTree(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeConnection
    basicTreeNode(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): BasicTreeNodeConnection
    fireGuardiansFireReport(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansFireReportConnection
    fireGuardiansNotificationSubscription(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansNotificationSubscriptionConnection
    fireGuardiansWallet(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): FireGuardiansWalletConnection
    systemAutoIncrement(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemAutoIncrementConnection
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
    systemBotServiceHook(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotServiceHookConnection
    systemConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemConfigurationConnection
    systemEntity(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemEntityConnection
    systemNotificationCssTemplateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationCssTemplateConfigurationConnection
    systemNotificationEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationEventConnection
    systemNotificationNotificationTemplate(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationNotificationTemplateConnection
    systemNotificationStatefulEvent(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemNotificationStatefulEventConnection
    systemQuery(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemQueryConnection
    systemTenant(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemTenantConnection
    systemTenantConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemTenantConfigurationConnection
    systemUIPage(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemUIPageConnection
    systemUIStudioRoot(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemUIStudioRootConnection
    systemUIStudioTreeItem(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemUIStudioTreeItemConnection
    systemUIUIElement(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemUIUIElementConnection
}

"Runtime entities of construction kit type 'System.Bot/ServiceHook'"
type SystemBotServiceHook {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: SystemBotServiceHook_ConfiguredByUnion
    constructionKitType: CkType
    enabled: Boolean!
    fieldFilter: [SystemFieldFilter!]!
    name: String!
    queryCkTypeId: String!
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
    serviceHookAction: String!
    serviceHookApiKey: String
    serviceHookBaseUri: String!
}

"A connection to `SystemBotServiceHook`."
type SystemBotServiceHookConnection {
    "Information to aid in pagination."
    edges: [SystemBotServiceHookEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemBotServiceHook]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemBotServiceHook`."
type SystemBotServiceHookEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemBotServiceHook
}

type SystemBotServiceHookMutations {
    "Creates new entities of type 'SystemBotServiceHook'."
    create(entities: [SystemBotServiceHookInput]!): [SystemBotServiceHook]
    "Deletes an entity of type 'SystemBotServiceHook'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemBotServiceHook'."
    update(entities: [SystemBotServiceHookInputUpdate]!): [SystemBotServiceHook]
}

type SystemBotServiceHookUpdate {
    "The corresponding item"
    item: SystemBotServiceHook
    updateState: UpdateType
}

type SystemBotServiceHookUpdateMessage {
    "The corresponding items"
    items: [SystemBotServiceHookUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemBotServiceHook"
type SystemBotServiceHook_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System/Configuration'"
type SystemConfiguration {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: SystemConfiguration_ConfiguredByUnion
    constructionKitType: CkType
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `SystemConfiguration`."
type SystemConfigurationConnection {
    "Information to aid in pagination."
    edges: [SystemConfigurationEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemConfiguration]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemConfiguration`."
type SystemConfigurationEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemConfiguration
}

type SystemConfigurationUpdate {
    "The corresponding item"
    item: SystemConfiguration
    updateState: UpdateType
}

type SystemConfigurationUpdateMessage {
    "The corresponding items"
    items: [SystemConfigurationUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemConfiguration"
type SystemConfiguration_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System/Entity'"
type SystemEntity {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: SystemEntity_ConfiguredByUnion
    constructionKitType: CkType
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `SystemEntity`."
type SystemEntityConnection {
    "Information to aid in pagination."
    edges: [SystemEntityEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemEntity]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemEntity`."
type SystemEntityEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemEntity
}

type SystemEntityUpdate {
    "The corresponding item"
    item: SystemEntity
    updateState: UpdateType
}

type SystemEntityUpdateMessage {
    "The corresponding items"
    items: [SystemEntityUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemEntity"
type SystemEntity_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit record 'System/FieldFilter'"
type SystemFieldFilter {
    attributePath: String!
    comparisonValue: String
    constructionKitType: CkType
    operator: SystemFieldFilterOperator!
}

"Runtime entities of construction kit type 'System.Notification/CssTemplateConfiguration'"
type SystemNotificationCssTemplateConfiguration {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: SystemNotificationCssTemplateConfiguration_ConfiguredByUnion
    constructionKitType: CkType
    cssStyle: String!
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `SystemNotificationCssTemplateConfiguration`."
type SystemNotificationCssTemplateConfigurationConnection {
    "Information to aid in pagination."
    edges: [SystemNotificationCssTemplateConfigurationEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemNotificationCssTemplateConfiguration]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemNotificationCssTemplateConfiguration`."
type SystemNotificationCssTemplateConfigurationEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemNotificationCssTemplateConfiguration
}

type SystemNotificationCssTemplateConfigurationMutations {
    "Creates new entities of type 'SystemNotificationCssTemplateConfiguration'."
    create(entities: [SystemNotificationCssTemplateConfigurationInput]!): [SystemNotificationCssTemplateConfiguration]
    "Deletes an entity of type 'SystemNotificationCssTemplateConfiguration'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemNotificationCssTemplateConfiguration'."
    update(entities: [SystemNotificationCssTemplateConfigurationInputUpdate]!): [SystemNotificationCssTemplateConfiguration]
}

type SystemNotificationCssTemplateConfigurationUpdate {
    "The corresponding item"
    item: SystemNotificationCssTemplateConfiguration
    updateState: UpdateType
}

type SystemNotificationCssTemplateConfigurationUpdateMessage {
    "The corresponding items"
    items: [SystemNotificationCssTemplateConfigurationUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemNotificationCssTemplateConfiguration"
type SystemNotificationCssTemplateConfiguration_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Notification/Event'"
type SystemNotificationEvent {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: SystemNotificationEvent_ConfiguredByUnion
    constructionKitType: CkType
    level: SystemNotificationEventLevels!
    message: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
    source: SystemNotificationEventSources!
}

"A connection to `SystemNotificationEvent`."
type SystemNotificationEventConnection {
    "Information to aid in pagination."
    edges: [SystemNotificationEventEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemNotificationEvent]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemNotificationEvent`."
type SystemNotificationEventEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemNotificationEvent
}

type SystemNotificationEventMutations {
    "Creates new entities of type 'SystemNotificationEvent'."
    create(entities: [SystemNotificationEventInput]!): [SystemNotificationEvent]
    "Deletes an entity of type 'SystemNotificationEvent'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemNotificationEvent'."
    update(entities: [SystemNotificationEventInputUpdate]!): [SystemNotificationEvent]
}

type SystemNotificationEventUpdate {
    "The corresponding item"
    item: SystemNotificationEvent
    updateState: UpdateType
}

type SystemNotificationEventUpdateMessage {
    "The corresponding items"
    items: [SystemNotificationEventUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemNotificationEvent"
type SystemNotificationEvent_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Notification/NotificationTemplate'"
type SystemNotificationNotificationTemplate {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    bodyTemplate: String
    ckTypeId: CkTypeId
    configuredBy: SystemNotificationNotificationTemplate_ConfiguredByUnion
    constructionKitType: CkType
    renderingType: SystemNotificationRenderingTypes!
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
    subjectTemplate: String!
    type: SystemNotificationNotificationTypes!
}

"A connection to `SystemNotificationNotificationTemplate`."
type SystemNotificationNotificationTemplateConnection {
    "Information to aid in pagination."
    edges: [SystemNotificationNotificationTemplateEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemNotificationNotificationTemplate]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemNotificationNotificationTemplate`."
type SystemNotificationNotificationTemplateEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemNotificationNotificationTemplate
}

type SystemNotificationNotificationTemplateMutations {
    "Creates new entities of type 'SystemNotificationNotificationTemplate'."
    create(entities: [SystemNotificationNotificationTemplateInput]!): [SystemNotificationNotificationTemplate]
    "Deletes an entity of type 'SystemNotificationNotificationTemplate'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemNotificationNotificationTemplate'."
    update(entities: [SystemNotificationNotificationTemplateInputUpdate]!): [SystemNotificationNotificationTemplate]
}

type SystemNotificationNotificationTemplateUpdate {
    "The corresponding item"
    item: SystemNotificationNotificationTemplate
    updateState: UpdateType
}

type SystemNotificationNotificationTemplateUpdateMessage {
    "The corresponding items"
    items: [SystemNotificationNotificationTemplateUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemNotificationNotificationTemplate"
type SystemNotificationNotificationTemplate_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.Notification/StatefulEvent'"
type SystemNotificationStatefulEvent {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: SystemNotificationStatefulEvent_ConfiguredByUnion
    constructionKitType: CkType
    level: SystemNotificationEventLevels!
    message: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
    source: SystemNotificationEventSources!
    state: SystemNotificationEventStates!
}

"A connection to `SystemNotificationStatefulEvent`."
type SystemNotificationStatefulEventConnection {
    "Information to aid in pagination."
    edges: [SystemNotificationStatefulEventEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemNotificationStatefulEvent]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemNotificationStatefulEvent`."
type SystemNotificationStatefulEventEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemNotificationStatefulEvent
}

type SystemNotificationStatefulEventMutations {
    "Creates new entities of type 'SystemNotificationStatefulEvent'."
    create(entities: [SystemNotificationStatefulEventInput]!): [SystemNotificationStatefulEvent]
    "Deletes an entity of type 'SystemNotificationStatefulEvent'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemNotificationStatefulEvent'."
    update(entities: [SystemNotificationStatefulEventInputUpdate]!): [SystemNotificationStatefulEvent]
}

type SystemNotificationStatefulEventUpdate {
    "The corresponding item"
    item: SystemNotificationStatefulEvent
    updateState: UpdateType
}

type SystemNotificationStatefulEventUpdateMessage {
    "The corresponding items"
    items: [SystemNotificationStatefulEventUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemNotificationStatefulEvent"
type SystemNotificationStatefulEvent_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System/Query'"
type SystemQuery {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    attributeSearchFilter: SystemAttributeSearchFilter
    ckTypeId: CkTypeId
    columns: [String!]!
    configuredBy: SystemQuery_ConfiguredByUnion
    constructionKitType: CkType
    fieldFilter: [SystemFieldFilter!]
    name: String!
    queryCkTypeId: String!
    queryType: SystemQueryTypes!
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
    sorting: [SystemSortOrderItem!]
    textSearchFilter: SystemTextSearchFilter
}

"A connection to `SystemQuery`."
type SystemQueryConnection {
    "Information to aid in pagination."
    edges: [SystemQueryEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemQuery]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemQuery`."
type SystemQueryEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemQuery
}

type SystemQueryMutations {
    "Creates new entities of type 'SystemQuery'."
    create(entities: [SystemQueryInput]!): [SystemQuery]
    "Deletes an entity of type 'SystemQuery'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemQuery'."
    update(entities: [SystemQueryInputUpdate]!): [SystemQuery]
}

type SystemQueryUpdate {
    "The corresponding item"
    item: SystemQuery
    updateState: UpdateType
}

type SystemQueryUpdateMessage {
    "The corresponding items"
    items: [SystemQueryUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemQuery"
type SystemQuery_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit record 'System/SortOrderItem'"
type SystemSortOrderItem {
    attributePath: String!
    constructionKitType: CkType
    sortOrder: SystemSortOrders!
}

"Runtime entities of construction kit type 'System/Tenant'"
type SystemTenant {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: SystemTenant_ConfiguredByUnion
    constructionKitType: CkType
    databaseName: String!
    parentTenantId: String
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
    tenantId: String!
}

"Runtime entities of construction kit type 'System/TenantConfiguration'"
type SystemTenantConfiguration {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configurationValue: String
    configuredBy: SystemTenantConfiguration_ConfiguredByUnion
    constructionKitType: CkType
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `SystemTenantConfiguration`."
type SystemTenantConfigurationConnection {
    "Information to aid in pagination."
    edges: [SystemTenantConfigurationEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemTenantConfiguration]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemTenantConfiguration`."
type SystemTenantConfigurationEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemTenantConfiguration
}

type SystemTenantConfigurationMutations {
    "Creates new entities of type 'SystemTenantConfiguration'."
    create(entities: [SystemTenantConfigurationInput]!): [SystemTenantConfiguration]
    "Deletes an entity of type 'SystemTenantConfiguration'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemTenantConfiguration'."
    update(entities: [SystemTenantConfigurationInputUpdate]!): [SystemTenantConfiguration]
}

type SystemTenantConfigurationUpdate {
    "The corresponding item"
    item: SystemTenantConfiguration
    updateState: UpdateType
}

type SystemTenantConfigurationUpdateMessage {
    "The corresponding items"
    items: [SystemTenantConfigurationUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemTenantConfiguration"
type SystemTenantConfiguration_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"A connection to `SystemTenant`."
type SystemTenantConnection {
    "Information to aid in pagination."
    edges: [SystemTenantEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemTenant]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemTenant`."
type SystemTenantEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemTenant
}

type SystemTenantMutations {
    "Creates new entities of type 'SystemTenant'."
    create(entities: [SystemTenantInput]!): [SystemTenant]
    "Deletes an entity of type 'SystemTenant'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemTenant'."
    update(entities: [SystemTenantInputUpdate]!): [SystemTenant]
}

type SystemTenantUpdate {
    "The corresponding item"
    item: SystemTenant
    updateState: UpdateType
}

type SystemTenantUpdateMessage {
    "The corresponding items"
    items: [SystemTenantUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemTenant"
type SystemTenant_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit record 'System/TextSearchFilter'"
type SystemTextSearchFilter {
    constructionKitType: CkType
    searchValue: String!
}

"Runtime entities of construction kit type 'System.UI/Page'"
type SystemUIPage {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: SystemUIPage_ConfiguredByUnion
    constructionKitType: CkType
    content: String!
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `SystemUIPage`."
type SystemUIPageConnection {
    "Information to aid in pagination."
    edges: [SystemUIPageEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemUIPage]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemUIPage`."
type SystemUIPageEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemUIPage
}

type SystemUIPageMutations {
    "Creates new entities of type 'SystemUIPage'."
    create(entities: [SystemUIPageInput]!): [SystemUIPage]
    "Deletes an entity of type 'SystemUIPage'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemUIPage'."
    update(entities: [SystemUIPageInputUpdate]!): [SystemUIPage]
}

type SystemUIPageUpdate {
    "The corresponding item"
    item: SystemUIPage
    updateState: UpdateType
}

type SystemUIPageUpdateMessage {
    "The corresponding items"
    items: [SystemUIPageUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemUIPage"
type SystemUIPage_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.UI/StudioRoot'"
type SystemUIStudioRoot {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    children: SystemUIStudioRoot_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: SystemUIStudioRoot_ConfiguredByUnion
    constructionKitType: CkType
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
    targetCkTypeId: String!
    targetRtId: String!
}

"A connection to `SystemUIStudioRoot`."
type SystemUIStudioRootConnection {
    "Information to aid in pagination."
    edges: [SystemUIStudioRootEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemUIStudioRoot]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemUIStudioRoot`."
type SystemUIStudioRootEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemUIStudioRoot
}

type SystemUIStudioRootMutations {
    "Creates new entities of type 'SystemUIStudioRoot'."
    create(entities: [SystemUIStudioRootInput]!): [SystemUIStudioRoot]
    "Deletes an entity of type 'SystemUIStudioRoot'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemUIStudioRoot'."
    update(entities: [SystemUIStudioRootInputUpdate]!): [SystemUIStudioRoot]
}

type SystemUIStudioRootUpdate {
    "The corresponding item"
    item: SystemUIStudioRoot
    updateState: UpdateType
}

type SystemUIStudioRootUpdateMessage {
    "The corresponding items"
    items: [SystemUIStudioRootUpdate]
}

"Association System/ParentChild (Inbound) of entity type SystemUIStudioRoot"
type SystemUIStudioRoot_ChildrenUnion {
    systemUIStudioTreeItem(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemUIStudioTreeItemConnection
}

"Association System.Bot/Configures (Inbound) of entity type SystemUIStudioRoot"
type SystemUIStudioRoot_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Runtime entities of construction kit type 'System.UI/StudioTreeItem'"
type SystemUIStudioTreeItem {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    children: SystemUIStudioTreeItem_ChildrenUnion
    ckTypeId: CkTypeId
    configuredBy: SystemUIStudioTreeItem_ConfiguredByUnion
    constructionKitType: CkType
    parent: SystemUIStudioTreeItem_ParentUnion
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
    targetCkTypeId: String!
    targetRoleId: String!
}

"A connection to `SystemUIStudioTreeItem`."
type SystemUIStudioTreeItemConnection {
    "Information to aid in pagination."
    edges: [SystemUIStudioTreeItemEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemUIStudioTreeItem]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemUIStudioTreeItem`."
type SystemUIStudioTreeItemEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemUIStudioTreeItem
}

type SystemUIStudioTreeItemMutations {
    "Creates new entities of type 'SystemUIStudioTreeItem'."
    create(entities: [SystemUIStudioTreeItemInput]!): [SystemUIStudioTreeItem]
    "Deletes an entity of type 'SystemUIStudioTreeItem'."
    delete(entities: [OctoObjectId]!): Boolean
    "Updates existing entity of type 'SystemUIStudioTreeItem'."
    update(entities: [SystemUIStudioTreeItemInputUpdate]!): [SystemUIStudioTreeItem]
}

type SystemUIStudioTreeItemUpdate {
    "The corresponding item"
    item: SystemUIStudioTreeItem
    updateState: UpdateType
}

type SystemUIStudioTreeItemUpdateMessage {
    "The corresponding items"
    items: [SystemUIStudioTreeItemUpdate]
}

"Association System/ParentChild (Inbound) of entity type SystemUIStudioTreeItem"
type SystemUIStudioTreeItem_ChildrenUnion {
    systemUIStudioTreeItem(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemUIStudioTreeItemConnection
}

"Association System.Bot/Configures (Inbound) of entity type SystemUIStudioTreeItem"
type SystemUIStudioTreeItem_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Association System/ParentChild (Outbound) of entity type SystemUIStudioTreeItem"
type SystemUIStudioTreeItem_ParentUnion {
    systemUIStudioRoot(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemUIStudioRootConnection
    systemUIStudioTreeItem(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemUIStudioTreeItemConnection
}

"Runtime entities of construction kit type 'System.UI/UIElement'"
type SystemUIUIElement {
    associations(
        "Only return edges after the specified cursor."
        after: String,
        "The construction kit type with the given id."
        ckId: String!,
        "The direction of the association."
        direction: GraphDirection!,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Include indirect associations, otherwise direct associations are returned."
        includeIndirect: Boolean,
        "The role id of the association."
        roleId: String!,
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): RtEntityGenericDtoConnection
    ckTypeId: CkTypeId
    configuredBy: SystemUIUIElement_ConfiguredByUnion
    constructionKitType: CkType
    rtChangedDateTime: DateTime
    rtCreationDateTime: DateTime
    rtId: OctoObjectId!
    rtVersion: ULong
    rtWellKnownName: String
}

"A connection to `SystemUIUIElement`."
type SystemUIUIElementConnection {
    "Information to aid in pagination."
    edges: [SystemUIUIElementEdge]
    "Result of grouping the items by attributes."
    groupings: [grouping]
    "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
    items: [SystemUIUIElement]
    "Information to aid in pagination."
    pageInfo: PageInfo
    "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
    totalCount: Int
}

"An edge in a connection from an object to another object of type `SystemUIUIElement`."
type SystemUIUIElementEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: SystemUIUIElement
}

type SystemUIUIElementUpdate {
    "The corresponding item"
    item: SystemUIUIElement
    updateState: UpdateType
}

type SystemUIUIElementUpdateMessage {
    "The corresponding items"
    items: [SystemUIUIElementUpdate]
}

"Association System.Bot/Configures (Inbound) of entity type SystemUIUIElement"
type SystemUIUIElement_ConfiguredByUnion {
    systemBotAttributeAggregateConfiguration(
        "Only return edges after the specified cursor."
        after: String,
        "Filters items based on field compare"
        fieldFilter: [FieldFilter],
        "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
        first: Int,
        "Groups items based on attributes"
        groupBy: GroupBy,
        "Returns the entity with the given rtId."
        rtId: OctoObjectId,
        "Returns entities with the given rtIds."
        rtIds: [OctoObjectId],
        "Filters items based on text search"
        searchFilter: SearchFilter,
        "Sort order for items"
        sortOrder: [Sort]
    ): SystemBotAttributeAggregateConfigurationConnection
}

"Grouping of items result"
type grouping {
    "The average value of the given attribute names."
    avgStatistics: [statistics]
    "The count of entities in the group."
    count: Int!
    "The count of value of the given attribute names that are not null."
    countStatistics: [statistics]
    "A list of attributes the items are grouped by."
    groupByAttributeNames: [String]!
    "The key value of the group."
    keys: [SimpleScalar]!
    "The maximum value of the given attribute names."
    maxStatistics: [statistics]
    "The minimum value of the given attribute names."
    minStatistics: [statistics]
}

"Statistics of items result"
type statistics {
    "Attribute name of the statistic"
    attributeName: String
    "Statistic value"
    value: SimpleScalar
}

"Defines the type of modification during write operations"
enum AssociationModOptions {
    CREATE
    DELETE
}

"Enum of valid attribute types"
enum AttributeValueType {
    BINARY
    BINARY_LINKED
    BOOLEAN
    DATE_TIME
    DATE_TIME_OFFSET
    DOUBLE
    ENUM
    GEOSPATIAL_POINT
    INT
    INTEGER
    INTEGER_64
    INTEGER_ARRAY
    INT_64
    INT_ARRAY
    RECORD
    RECORD_ARRAY
    STRING
    STRING_ARRAY
    TIME_SPAN
}

"Runtime entities of construction kit enum 'Basic/LegalEntityType'"
enum BasicLegalEntityType {
    "Actor in economic life, such as any natural or legal person with UGB relevance."
    COMPANY
    "Legal structure with the characteristics of a person"
    LEGAL_PERSON
    "Administrative unit with sovereign power such as municipality, federal state, republic."
    LOCAL_AUTHORITY
    "A natural person is a human being with legal capacity, in contrast to a legal person (such as a company, organization, or government entity)."
    NATURAL_PERSON
}

"Runtime entities of construction kit enum 'Basic/Salutation'"
enum BasicSalutation {
    "The salutation is female"
    FEMALE
    "The salutation is male"
    MALE
    "The salutation is non-binary"
    NON_BINARY
    "The salutation is unknown or not defined"
    UNKNOWN
}

"Runtime entities of construction kit enum 'Basic/TypeOfTelephoneBasic'"
enum BasicTypeOfTelephoneBasic {
    HOME
    OFFICE
    SECRETARY
    SUBSTITUTE
}

"Runtime entities of construction kit enum 'Basic/TypeOfTelephoneEnhanced'"
enum BasicTypeOfTelephoneEnhanced {
    HOME
    OFFICE
    OFFICE_MOBILE
    PRIVATE_MOBILE
    SECRETARY
    SUBSTITUTE
}

"Defines the possible operation operations to extend construction elements."
enum CkExtensionUpdateOperations {
    DELETE
    INSERT
}

"Defines the operator of field compare"
enum FieldFilterOperators {
    ANY_EQ
    ANY_LIKE
    EQUALS
    GREATER_EQUAL_THAN
    GREATER_THAN
    IN
    LESS_EQUAL_THAN
    LESS_THAN
    LIKE
    MATCH_REG_EX
    NOT_EQUALS
    NOT_IN
}

"Enum of graph directions"
enum GraphDirection {
    ANY
    INBOUND
    OUTBOUND
}

"Enum of the availability states of models."
enum ModelState {
    AVAILABLE
    IMPORTING
}

"The type of search that is used (a text based search using text analysis (high performance, scoring, maybe more false positives) or filtering of attributes (lower performance, more exact results)"
enum SearchFilterTypes {
    ATTRIBUTE_FILTER
    TEXT_SEARCH
}

"Defines the sort order"
enum SortOrders {
    ASCENDING
    DEFAULT
    DESCENDING
}

"Runtime entities of construction kit enum 'System/FieldFilterOperator'"
enum SystemFieldFilterOperator {
    "Compares an array field with at least one element that matches the specified value."
    ANY_EQ
    "Compares an array field with at least one element that matches the specified value using a pattern matching comparison. Use * as a wildcard character."
    ANY_LIKE
    "Compares the specified field to the specified value."
    EQUALS
    "Compares the specified field to the specified value and returns true if the field value is greater than or equal to the specified value."
    GREATER_EQUAL_THAN
    "Compares the specified field to the specified value and returns true if the field value is greater than the specified value."
    GREATER_THAN
    "Compares a field to be equal any value in the specified array."
    IN
    "Compares the specified field to the specified value and returns true if the field value is less than or equal to the specified value."
    LESS_EQUAL_THAN
    "Compares the specified field to the specified value and returns true if the field value is less than the specified value."
    LESS_THAN
    "Compares a field to the specified value using a pattern matching comparison. Use * as a wildcard character."
    LIKE
    "Matches an array field with at least one element that matches all the specified query criteria."
    MATCH
    "Matches a field containing a value that matches the specified regular expression."
    MATCH_REG_EX
    "Compares the specified field to the specified value and returns true if the values are not equal."
    NOT_EQUALS
    "Compares a field to be not equal any value in the specified array."
    NOT_IN
}

"Runtime entities of construction kit enum 'System.Notification/EventLevels'"
enum SystemNotificationEventLevels {
    "Critical"
    CRITICAL
    "Debug"
    DEBUG
    "Error"
    ERROR
    "Information"
    INFORMATION
    "Warning"
    WARNING
}

"Runtime entities of construction kit enum 'System.Notification/EventSources'"
enum SystemNotificationEventSources {
    "The event was generated by the Admin Panel."
    ADMIN_PANEL
    "The event was generated by the Asset Repository Service."
    ASSET_REPOSITORY_SERVICE
    "The event was generated by the Bot Service."
    BOT_SERVICE
    "The event was generated by the Communication Service."
    COMMUNICATION_SERVICE
    "The event was generated by the Identity Service."
    IDENTITY_SERVICE
    "The event was generated by the Mesh Adapter."
    MESH_ADAPTER
    "No source has been assigned to the event."
    UNDEFINED
}

"Runtime entities of construction kit enum 'System.Notification/EventStates'"
enum SystemNotificationEventStates {
    ACTIVE
    ERROR
    INACTIVE
}

"Runtime entities of construction kit enum 'System.Notification/NotificationTypes'"
enum SystemNotificationNotificationTypes {
    E_MAIL
    PUSH
    SMS
}

"Runtime entities of construction kit enum 'System.Notification/RenderingTypes'"
enum SystemNotificationRenderingTypes {
    HTML
    PLAIN
}

"Runtime entities of construction kit enum 'System/QueryTypes'"
enum SystemQueryTypes {
    "A flat query"
    FLAT
    "A tree query that returns results from a tree"
    TREE
}

"Runtime entities of construction kit enum 'System/SortOrders'"
enum SystemSortOrders {
    "Ascending order"
    ASCENDING
    "Default sorting based on data source type"
    DEFAULT
    "Descending order"
    DESCENDING
}

"Enum of valid update types"
enum UpdateType {
    DELETE
    INSERT
    REPLACE
    UNDEFINED
    UPDATE
}

scalar BigInt

"A construction kit id of type CkAttributeId."
scalar CkAttributeId

"A construction kit id of type CkEnumId."
scalar CkEnumId

"Identifies a construction kit model."
scalar CkModelId

"A construction kit id of type CkRecordId."
scalar CkRecordId

"A construction kit id of type CkTypeId."
scalar CkTypeId

"The `DateTime` scalar type represents a date and time. `DateTime` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
scalar DateTime

scalar LargeBinary

"A unique identifier for an runtime object."
scalar OctoObjectId

scalar SimpleScalar

scalar ULong

scalar Uri

input BasicAddressInput {
    addressOfAdditionalLink: String
    addressRemarks: [String!]
    cityTown: String
    department: String
    eMail: BasicEMailInput
    fax: BasicFaxNumberInput
    nationalCode: String
    pOBox: String
    phone: BasicPhoneNumberInput
    stateCounty: String
    street: String
    vATnumber: String
    zipOfPOBox: String
    zipcode: Int
}

input BasicAssetInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    parent: [RtAssociationInput]
    relatesFrom: [RtAssociationInput]
    relatesTo: [RtAssociationInput]
    rtWellKnownName: String
}

input BasicAssetInputUpdate {
    "Item to update"
    item: BasicAssetInput!
    rtId: OctoObjectId
}

input BasicBankAccountInput {
    accountHolder: String
    bankName: String
    iban: String
    swiftCode: String
}

input BasicCityInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    parent: [RtAssociationInput]
    relatesFrom: [RtAssociationInput]
    rtWellKnownName: String
    zipcode: Int
}

input BasicCityInputUpdate {
    "Item to update"
    item: BasicCityInput!
    rtId: OctoObjectId
}

input BasicContactInput {
    address: BasicAddressInput
    companyName: String
    companyRegisterNumber: String
    email: String
    firstName: String
    lastName: String
    legalEntityType: BasicLegalEntityType
    salutation: BasicSalutation
    taxIdentificationNumber: String
    titlePrefix: String
    titleSuffix: String
}

input BasicCountryInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    parent: [RtAssociationInput]
    relatesFrom: [RtAssociationInput]
    rtWellKnownName: String
}

input BasicCountryInputUpdate {
    "Item to update"
    item: BasicCountryInput!
    rtId: OctoObjectId
}

input BasicDistrictInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    parent: [RtAssociationInput]
    relatesFrom: [RtAssociationInput]
    rtWellKnownName: String
}

input BasicDistrictInputUpdate {
    "Item to update"
    item: BasicDistrictInput!
    rtId: OctoObjectId
}

input BasicEMailInput {
    eMail: String
    publicKey: String
    typeOfEMail: BasicTypeOfTelephoneBasic
    typeOfPublicKey: String
}

input BasicFaxNumberInput {
    number: String
    type: BasicTypeOfTelephoneBasic
}

input BasicMarkingInput {
    additionalText: String
    file: LargeBinary
    name: String
}

input BasicNamePlateInput {
    address: BasicAddressInput
    assetSpecificProperties: [BasicMarkingInput]
    manufacturerName: String
    manufacturerProductDesignation: String
    manufacturerProductFamily: String
    markings: [BasicMarkingInput]
    serialNumber: String
    yearOfConstruction: String
}

input BasicPhoneNumberInput {
    number: String
    type: BasicTypeOfTelephoneEnhanced
}

input BasicStateInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    parent: [RtAssociationInput]
    relatesFrom: [RtAssociationInput]
    rtWellKnownName: String
}

input BasicStateInputUpdate {
    "Item to update"
    item: BasicStateInput!
    rtId: OctoObjectId
}

input BasicTimeRangeInput {
    from: DateTime
    to: DateTime
}

input BasicTreeInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    rtWellKnownName: String
}

input BasicTreeInputUpdate {
    "Item to update"
    item: BasicTreeInput!
    rtId: OctoObjectId
}

input BasicTreeNodeInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    name: String
    parent: [RtAssociationInput]
    relatesFrom: [RtAssociationInput]
    rtWellKnownName: String
}

input BasicTreeNodeInputUpdate {
    "Item to update"
    item: BasicTreeNodeInput!
    rtId: OctoObjectId
}

input CkEnumUpdate {
    operation: CkExtensionUpdateOperations
    value: CkEnumValueInput
}

"A construction kit enum value"
input CkEnumValueInput {
    "Description of enum value"
    description: String
    "Unique key of enum value"
    key: Int
    "Name of enum value"
    name: String
}

input FieldFilter {
    attributePath: String!
    comparisonValue: SimpleScalar
    operator: FieldFilterOperators!
}

input FireGuardiansFireReportInput {
    configuredBy: [RtAssociationInput]
    description: String
    image: LargeBinary
    initialNotificationSent: Boolean
    location: PointInput
    name: String
    rtWellKnownName: String
}

input FireGuardiansFireReportInputUpdate {
    "Item to update"
    item: FireGuardiansFireReportInput!
    rtId: OctoObjectId
}

input FireGuardiansNotificationSubscriptionInput {
    configuredBy: [RtAssociationInput]
    endpoint: String
    parent: [RtAssociationInput]
    rtWellKnownName: String
    subscriptionConfiguration: String
}

input FireGuardiansNotificationSubscriptionInputUpdate {
    "Item to update"
    item: FireGuardiansNotificationSubscriptionInput!
    rtId: OctoObjectId
}

input FireGuardiansWalletInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    description: String
    identityId: String
    lastNotificationUpdate: DateTime
    location: PointInput
    name: String
    rtWellKnownName: String
}

input FireGuardiansWalletInputUpdate {
    "Item to update"
    item: FireGuardiansWalletInput!
    rtId: OctoObjectId
}

input GroupBy {
    avgAttributeNameList: [String]
    countAttributeNameList: [String]
    groupByAttributeNameList: [String]!
    maxValueAttributeNameList: [String]
    minValueAttributeNameList: [String]
}

input NearGeospatialFilter {
    attributeName: String!
    maxDistance: Float
    minDistance: Float
    point: PointInput!
}

input PointInput {
    coordinates: PositionInput!
}

input PositionInput {
    latitude: Float!
    longitude: Float!
}

"Input field for associations"
input RtAssociationInput {
    "Type of modification."
    modOption: AssociationModOptions
    "Runtime ID of the target entity"
    target: RtEntityId!
}

"Id information consists of CkTypeId and RtId"
input RtEntityId {
    "Construction kit type id of the object."
    ckTypeId: CkTypeId!
    "Unique id of the object."
    rtId: OctoObjectId!
}

"Represents the input for a cell a row within a runtime query."
input RtQueryCellInput {
    "Path of the attribute within an entity."
    attributePath: String
    "Value of the cell."
    value: SimpleScalar
}

input RtQueryRowInput {
    cells: [RtQueryCellInput]!
    ckTypeId: CkTypeId!
    rtWellKnownName: String
}

input RtQueryRowUpdate {
    "Row as input to be updated within the query."
    item: RtQueryRowInput
    rtId: OctoObjectId
}

input SearchFilter {
    attributePaths: [String]
    language: String
    searchTerm: String!
    type: SearchFilterTypes
}

input Sort {
    attributePath: String!
    sortOrder: SortOrders
}

input SystemAttributeSearchFilterInput {
    attributePaths: [String!]
    searchValue: String
}

input SystemAutoIncrementInput {
    configuredBy: [RtAssociationInput]
    currentValue: Int
    end: Int
    rtWellKnownName: String
    start: Int
}

input SystemAutoIncrementInputUpdate {
    "Item to update"
    item: SystemAutoIncrementInput!
    rtId: OctoObjectId
}

input SystemBotAttributeAggregateConfigurationInput {
    autoCompleteFilter: String
    autoCompleteLimit: Int
    configuredBy: [RtAssociationInput]
    configures: [RtAssociationInput]
    isAutoCompleteEnabled: Boolean
    rtWellKnownName: String
}

input SystemBotAttributeAggregateConfigurationInputUpdate {
    "Item to update"
    item: SystemBotAttributeAggregateConfigurationInput!
    rtId: OctoObjectId
}

input SystemBotServiceHookInput {
    configuredBy: [RtAssociationInput]
    enabled: Boolean
    fieldFilter: [SystemFieldFilterInput]
    name: String
    queryCkTypeId: String
    rtWellKnownName: String
    serviceHookAction: String
    serviceHookApiKey: String
    serviceHookBaseUri: String
}

input SystemBotServiceHookInputUpdate {
    "Item to update"
    item: SystemBotServiceHookInput!
    rtId: OctoObjectId
}

input SystemFieldFilterInput {
    attributePath: String
    comparisonValue: String
    operator: SystemFieldFilterOperator
}

input SystemNotificationCssTemplateConfigurationInput {
    configuredBy: [RtAssociationInput]
    cssStyle: String
    rtWellKnownName: String
}

input SystemNotificationCssTemplateConfigurationInputUpdate {
    "Item to update"
    item: SystemNotificationCssTemplateConfigurationInput!
    rtId: OctoObjectId
}

input SystemNotificationEventInput {
    configuredBy: [RtAssociationInput]
    level: SystemNotificationEventLevels
    message: String
    rtWellKnownName: String
    source: SystemNotificationEventSources
}

input SystemNotificationEventInputUpdate {
    "Item to update"
    item: SystemNotificationEventInput!
    rtId: OctoObjectId
}

input SystemNotificationNotificationTemplateInput {
    bodyTemplate: String
    configuredBy: [RtAssociationInput]
    renderingType: SystemNotificationRenderingTypes
    rtWellKnownName: String
    subjectTemplate: String
    type: SystemNotificationNotificationTypes
}

input SystemNotificationNotificationTemplateInputUpdate {
    "Item to update"
    item: SystemNotificationNotificationTemplateInput!
    rtId: OctoObjectId
}

input SystemNotificationStatefulEventInput {
    configuredBy: [RtAssociationInput]
    level: SystemNotificationEventLevels
    message: String
    rtWellKnownName: String
    source: SystemNotificationEventSources
    state: SystemNotificationEventStates
}

input SystemNotificationStatefulEventInputUpdate {
    "Item to update"
    item: SystemNotificationStatefulEventInput!
    rtId: OctoObjectId
}

input SystemQueryInput {
    attributeSearchFilter: SystemAttributeSearchFilterInput
    columns: [String!]
    configuredBy: [RtAssociationInput]
    fieldFilter: [SystemFieldFilterInput]
    name: String
    queryCkTypeId: String
    queryType: SystemQueryTypes
    rtWellKnownName: String
    sorting: [SystemSortOrderItemInput]
    textSearchFilter: SystemTextSearchFilterInput
}

input SystemQueryInputUpdate {
    "Item to update"
    item: SystemQueryInput!
    rtId: OctoObjectId
}

input SystemSortOrderItemInput {
    attributePath: String
    sortOrder: SystemSortOrders
}

input SystemTenantConfigurationInput {
    configurationValue: String
    configuredBy: [RtAssociationInput]
    rtWellKnownName: String
}

input SystemTenantConfigurationInputUpdate {
    "Item to update"
    item: SystemTenantConfigurationInput!
    rtId: OctoObjectId
}

input SystemTenantInput {
    configuredBy: [RtAssociationInput]
    databaseName: String
    parentTenantId: String
    rtWellKnownName: String
    tenantId: String
}

input SystemTenantInputUpdate {
    "Item to update"
    item: SystemTenantInput!
    rtId: OctoObjectId
}

input SystemTextSearchFilterInput {
    searchValue: String
}

input SystemUIPageInput {
    configuredBy: [RtAssociationInput]
    content: String
    rtWellKnownName: String
}

input SystemUIPageInputUpdate {
    "Item to update"
    item: SystemUIPageInput!
    rtId: OctoObjectId
}

input SystemUIStudioRootInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    rtWellKnownName: String
    targetCkTypeId: String
    targetRtId: String
}

input SystemUIStudioRootInputUpdate {
    "Item to update"
    item: SystemUIStudioRootInput!
    rtId: OctoObjectId
}

input SystemUIStudioTreeItemInput {
    children: [RtAssociationInput]
    configuredBy: [RtAssociationInput]
    parent: [RtAssociationInput]
    rtWellKnownName: String
    targetCkTypeId: String
    targetRoleId: String
}

input SystemUIStudioTreeItemInputUpdate {
    "Item to update"
    item: SystemUIStudioTreeItemInput!
    rtId: OctoObjectId
}
